/***************************************************************
* Description: 	OMIS extract - Mosaiq - Orange
* Version:	1.9
* Author:	William Su
* Updates	
* 20170823: created
* 20170925: updated mappings
* 20171114: updated referral, mdt, consul, palliative, ecog dates, tnmstage group
* 20171120: update countries map, tmn filter
* 20171121: update output field length and debug field lengths
* 20171124: update hospital/facility in output
* 20171206: st licence -> AHPRA, tnmstagedate -> Edit_DtTm, added cplan name, regimen, and ID to QA output, blank out AntiNeoplasticCycles if episodeenddate not present, 
			initial treatment 0 -> 2, other staging field length 6 -> 14, clinical trial to patient and group id level, ecog/performance > dx date, remove 2200 ireland country code
* 20171211: remove space from cancer site code, null MRN, episodeintent default to 9, debugging cancer site code not in (B,C,D,L), 
* 20180111: IDC to MRN, IDA to AUID, CancerSiteCodeID: CNNN - ICDO3, CNN.NN - ICD10, update drug admin amt >= 0, "Maintenance" added for episodeintent, C50 for ICD10V2 -> ICD10V3, format medicare no.
* 20180112: added 'unk' to stagegroup map ,
* 20180222: updated ICD03 site code formatting, update debug null string count, 
* 20180226: filter by Rx admin date only at PCP level.
* 20180301: add @stagegroup, TNM remove collation default
* 20180302: updated MorphologyCodeIDVersion,
* 20180306: revert back to end cycle cohort
* 20180309: made treatment and drug end dates equal
* 20180312: added no lock, 
* 20180314: remove 'chiv' from initial consult, topog in C/B/D/L, 
* 20180315: removed topog in C/B/D/L,
* 20180319: coalesce(Date_Staged_DtTm, edit_dttm, Dx_DtTm1) for TNMStagingDate
* 20180326: get max tnm_id for staging, update initial_treament logic, 
* 20180418: remove date param for initial_treatment, update ClinicalTrialName, added space in WayfareAddress, 
* 20180808: update last admin date logic to < (@enddate - cycle length*2), remove reference to discontinue/plan end date. Antineoplastic cycle in line with last admin date
			@enddate set to today if in the future, last admin date logic remove "approved" status, first/last admin date updated status types 
* 20180816:	medical remove link to primary medical
* 20180820:	remove comma in address field
* 20180824: null 1 char alias name and givenname2, HistopathologicalGradeID default to null
* 20180905: added extra filter for eviq protocols
* 20180919: added schedule.version = 0
* 20180921: update patient schedule count group by to patient only
* 20181002: Updated mapping for BestBasisofDx and Laterality
* 20181017: Added 'ECOG Performance Status' in ObsDef(Assessment)
* 20181018: Commented out "Location_name" - was once used for more specific counts but is not required (refer to the update @20180921)
* 20181023: MDT date is extracted from "Documents" (MDTLetterDate) and if the checklist MDTDate is NULL then MDTLetterDate is populated
* 20181203: Replaced '%MDT -%' with '%MDT%' to pull out more MDT types
* 20190218: Replaced '%MDT%' with '%MDT -%' to pull out more MDT types (reverted) and remove comma from MiddleName
* 20190221: (1) MDT date should be Max 28 days before treatment start date AND Greater than Diagnosis Date. (2) Date of Referral to include PatAuth.Req_DtTm and Consultation Date to include PatAuth.Eff_DtTm. (3) ECOG Date-shorten the period from 1 year to 28 days.
* 20190226: Added Document with Status '13-REVIEW REQUIRED' for Referral and MDT Dates
* 20190228: (1) If Diagnosis date is NULL then Ignore check to look for MDT > Diagdate. (2) MDT changed: date to pick from Due_DtTm of QCL instead of Edit_DtTm
* 20190306: Changed PerformanceStatus from varchar(1) to varchar(15)
* 20190417: Take Earliest TNM instead of Latest (Changed MaxID to Min ID)
* 20190429: Commented Updates on EpisodeStart and End Dates (DO NOT USE PatCPlan_Date - some EpisodeStart and EpisodeEnd were linked to PatCPlan_EndDate)
* 20190813: (1) MDT Date widened - period from 28 days to 1 year
* 20190828: Added ProtocolID NULL condition
* 20190905: Add additional column dateofintialconsult-for Test
* 20190906: (1) CarePlan Voided but Treatment already administered as part of this careplan - Include this in extract (2) Removed JOIN in calulated Inst_ID tied to patient care plan's Inst_ID (--and TreatmentLocation.Inst_ID = patient_care_plan.Inst_ID)
* 20191003: InitConsultDate - Added 110
* 20191010: Removed Activity Type Filter
* 20220606: Update to single extract all Facilities.
******************************************************************/

--use [MOSAIQ]
--go
 
 set nocount on
  
declare @startdate date, @enddate date, @debug char(1), @hospital varchar(20) , @QA char(1), @showheader varchar(1), @hosp_code varchar(10), @facility varchar(10)

set @startdate = '2021-10-01'		-- start of month
set @enddate = '2021-12-31'			-- end of month
--set @hosp_code = 'WNSW'				-- Hospital code (ignore):  K211 = Dubbo, L216 = ORANGE, S201 = Broken Hill, L201 = Bathurst
set @QA = 'n'						-- Y = QA mode, N = final output for upload to CI
set @showheader = 'y'				-- Y = show file name, N = omit file name 
 


declare @dt varchar(12)
if @showheader = 'Y'
begin
	set @dt = right('0'+cast(datepart(d, getdate()) as varchar(2)),2)+right('0'+cast(datepart(m, getdate()) as varchar(2)),2)+right('0'+cast(datepart(yyyy, getdate()) as varchar(4)),4)+right('0'+cast(datepart(hh, getdate()) as varchar(2)),2)+right('0'+cast(datepart(mi, getdate()) as varchar(2)),2) 
	select 'MEDONC_'+rtrim('WNSW')+'_'+@dt+'.csv' as Output_File_Name
end

if  @enddate > cast(getdate() as date)
  set @enddate = cast(getdate() as date)

--select @facility = Pager from config with (nolock) where CellPhone = @hosp_code

 
declare @countries table (code int, name varchar(200))
declare @states table (code varchar(3), name varchar(200))
declare @indigenious table (code varchar(3), name varchar(200))
declare @cancerdiagnosis table (code varchar(3), name varchar(200))
declare @laterality table (code varchar(3), name varchar(200))
declare @episodeintent table (code varchar(3), name varchar(200))
declare @drugadminroute table (code int, name int)
declare @tnmstage table (name varchar(20))
declare @stagegroup table (code varchar(20), name varchar(20))
set @debug = @QA




insert into @stagegroup values ('0','0')
insert into @stagegroup values ('1','I')
insert into @stagegroup values ('2','II')
insert into @stagegroup values ('3','III')
insert into @stagegroup values ('4','IV')
insert into @stagegroup values ('0a','0a')
insert into @stagegroup values ('0is','0is')
insert into @stagegroup values ('1A','IA')
insert into @stagegroup values ('2a','IIA')
insert into @stagegroup values ('2B','IIB')
insert into @stagegroup values ('3A','IIIA')
insert into @stagegroup values ('3C','IIIC')
insert into @stagegroup values ('4a','IVA')
insert into @stagegroup values ('4X','IV')
insert into @stagegroup values ('I','I')
insert into @stagegroup values ('IA','IA')
insert into @stagegroup values ('IA1','IA1')
insert into @stagegroup values ('IA2','IA2')
insert into @stagegroup values ('IB','IB')
insert into @stagegroup values ('IB1','IB1')
insert into @stagegroup values ('IB2','IB2')
insert into @stagegroup values ('IC','IC')
insert into @stagegroup values ('II','II')
insert into @stagegroup values ('IIA','IIA')
insert into @stagegroup values ('IIA1','IIA1')
insert into @stagegroup values ('IIA2','IIA2')
insert into @stagegroup values ('IIB','IIB')
insert into @stagegroup values ('IIC','IIC')
insert into @stagegroup values ('III','III')
insert into @stagegroup values ('IIIA','IIIA')
insert into @stagegroup values ('IIIB','IIIB')
insert into @stagegroup values ('IIIC','IIIC')
insert into @stagegroup values ('IIIC1','IIIC1')
insert into @stagegroup values ('IIIC2','IIIC2')
insert into @stagegroup values ('IIINOS','III')
insert into @stagegroup values ('IINOS','II')
insert into @stagegroup values ('INOS','I')
insert into @stagegroup values ('IS','IS')
insert into @stagegroup values ('IV','IV')
insert into @stagegroup values ('IV B','IVB')
insert into @stagegroup values ('IVA','IVA')
insert into @stagegroup values ('IVB','IVB')
insert into @stagegroup values ('IVC','IVC')
insert into @stagegroup values ('IVNOS','IV')
insert into @stagegroup values ('Not Applicable','Not Applicable')
insert into @stagegroup values ('Occult Carcinoma','Occult Carcinoma')
insert into @stagegroup values ('Unknown','Unknown')
insert into @stagegroup values ('Unk','Unknown')
insert into @stagegroup values ('Unstaged','Unstaged')
insert into @stagegroup values ('REVIEW','REVIEW')



insert into @tnmstage values ('0')
insert into @tnmstage values ('0a')
insert into @tnmstage values ('0is')
insert into @tnmstage values ('I')
insert into @tnmstage values ('IS')
insert into @tnmstage values ('IA')
insert into @tnmstage values ('IA1')
insert into @tnmstage values ('IA2')
insert into @tnmstage values ('IB')
insert into @tnmstage values ('IB1')
insert into @tnmstage values ('IB2')
insert into @tnmstage values ('IC')
insert into @tnmstage values ('II')
insert into @tnmstage values ('IIA')
insert into @tnmstage values ('IIA1')
insert into @tnmstage values ('IIA2')
insert into @tnmstage values ('IIB')
insert into @tnmstage values ('IIC')
insert into @tnmstage values ('III')
insert into @tnmstage values ('IIIA')
insert into @tnmstage values ('IIIB')
insert into @tnmstage values ('IIIC')
insert into @tnmstage values ('IV')
insert into @tnmstage values ('IVA')
insert into @tnmstage values ('IVA1')
insert into @tnmstage values ('IVA2')
insert into @tnmstage values ('IVB')
insert into @tnmstage values ('IVC')
insert into @tnmstage values ('Occult Carcinoma')
insert into @tnmstage values ('IIIC1')
insert into @tnmstage values ('IIIC2')
insert into @tnmstage values ('Unstaged')
insert into @tnmstage values ('Not Applicable')
insert into @tnmstage values ('Unknown')
insert into @tnmstage values ('Unk')


insert into @episodeintent values (2,'1_Curative')
insert into @episodeintent values (3,'2_Palliative')
insert into @episodeintent values (22,'3_Neoadjuvant')
insert into @episodeintent values (21,'4_Adjuvant')
insert into @episodeintent values (22,'5_Induction')
insert into @episodeintent values (9,'6_Other, NOS')
insert into @episodeintent values (9,'7_BestSupportiveCare')
insert into @episodeintent values (1,'Maintenance')

insert into @indigenious values (1,'Aboriginal Origin')
insert into @indigenious values (3,'Both Aboriginal & To')
insert into @indigenious values (8,'Declined to Respond')
insert into @indigenious values (8,'Declined to Specify')
insert into @indigenious values (4,'Irish')
insert into @indigenious values (4,'Neither Aboriginal/T')
insert into @indigenious values (9,'Not Hispanic/Latino')
insert into @indigenious values (9,'Not Specified')
insert into @indigenious values (2,'Torres Strait Island')
insert into @indigenious values (9,'Unknown')

insert into @cancerdiagnosis values (2,'Clinical diagnosis')
insert into @cancerdiagnosis values (5,'Exfoliative cytology')
insert into @cancerdiagnosis values (8,'Histology')
insert into @cancerdiagnosis values (4,'Lab or marker study')
insert into @cancerdiagnosis values (8,'Microscopic confirm')
insert into @cancerdiagnosis values (2,'Radiography')
insert into @cancerdiagnosis values (9,'Unknown')
 

insert into @laterality values (3,'0 - Not paired')
insert into @laterality values (3,'0 - Not paired site')
insert into @laterality values (2,'1 - Right')
insert into @laterality values (2,'1 - Right - origin o')
insert into @laterality values (1,'2 - Left')
insert into @laterality values (1,'2 - Left - origin of')
insert into @laterality values (9,'3 - One side involved, right or left origin unspecified')
insert into @laterality values (3,'4 - Bilateral')
insert into @laterality values (3,'4 -  Bilateral involvement, side of origin unknown')
insert into @laterality values (9,'9 - Unknown side')
insert into @laterality values (9,'9 - Unknown side, Pa')
insert into @laterality values (9,'AL amyloidosis')
insert into @laterality values (3,'Bilateral - Simultan')
insert into @laterality values (1,'Left')
insert into @laterality values (3,'Not a paired site - ')
insert into @laterality values (1,'Origin left side - L')
insert into @laterality values (2,'Origin right side - ')
insert into @laterality values (2,'Right')

insert into @drugadminroute values (13,'707')
insert into @drugadminroute values (18,'2876')
insert into @drugadminroute values (8,'3883')
insert into @drugadminroute values (2,'6515')
insert into @drugadminroute values (6,'7013')
insert into @drugadminroute values (10,'7031')
insert into @drugadminroute values (13,'7115')
insert into @drugadminroute values (9,'10715')
insert into @drugadminroute values (7,'11453')
insert into @drugadminroute values (3,'17405')
insert into @drugadminroute values (98,'17492')
insert into @drugadminroute values (12,'17499')


insert into @states values ('0','Overseas')
insert into @states values ('1','New South Wales')
insert into @states values ('2','Victoria')
insert into @states values ('3','Queensland')
insert into @states values ('4','South Australia')
insert into @states values ('5','Western Australia')
insert into @states values ('6','Tasmania')
insert into @states values ('7','Northern Territory')
insert into @states values ('8','Australian Capital Territory')
insert into @states values ('9','Cocos Islands')
insert into @states values ('9','Christmas Island')
insert into @states values ('9','Jervis Bay Territory')
insert into @states values ('98','Australia')
insert into @states values ('99','Unknown')
insert into @states values ('0','OS')
insert into @states values ('1','NSW')
insert into @states values ('2','VIC')
insert into @states values ('3','QLD')
insert into @states values ('4','SA')
insert into @states values ('5','WA')
insert into @states values ('6','Tasmania')
insert into @states values ('6','TAS')
insert into @states values ('7','NT')
insert into @states values ('8','ACT')


insert into @countries values (1,'At Sea')
insert into @countries values (3,'Not Stated')
insert into @countries values (4,'Unknown')
insert into @countries values (5,'Unidentified')
insert into @countries values (911,'Europe')
insert into @countries values (912,'USSR - former')
insert into @countries values (913,'Former Yugoslavia')
insert into @countries values (914,'Czechoslovakia')
insert into @countries values (915,'Kurdistan')
insert into @countries values (916,'East Asia')
insert into @countries values (917,'Asia')
insert into @countries values (918,'Africa')
insert into @countries values (921,'Serbia and Montenegro')
insert into @countries values (1000,'Oceania and Antarctica')
insert into @countries values (1100,'Australia (incl External Ter)')
insert into @countries values (1101,'Australia')
insert into @countries values (1102,'Norfolk Island')
insert into @countries values (1199,'Australian External Territories nec')
insert into @countries values (1201,'New Zealand')
insert into @countries values (1300,'Melanesia')
insert into @countries values (1301,'New Caledonia')
insert into @countries values (1302,'Papua New Guinea')
insert into @countries values (1303,'Solomon Islands')
insert into @countries values (1304,'Vanuatu')
insert into @countries values (1400,'Micronesia')
insert into @countries values (1401,'Guam')
insert into @countries values (1402,'Kiribati')
insert into @countries values (1403,'Marshall Islands')
insert into @countries values (1404,'Micronesia Federated States of')
insert into @countries values (1405,'Nauru')
insert into @countries values (1406,'Northern Mariana Islands')
insert into @countries values (1407,'Palau')
insert into @countries values (1500,'Polynesia (excludes Hawaii)')
insert into @countries values (1501,'Cook Islands')
insert into @countries values (1502,'Fiji')
insert into @countries values (1503,'French Polynesia')
insert into @countries values (1504,'Niue')
insert into @countries values (1505,'Samoa')
insert into @countries values (1506,'Samoa American')
insert into @countries values (1507,'Tokelau')
insert into @countries values (1508,'Tonga')
insert into @countries values (1511,'Tuvalu')
insert into @countries values (1512,'Wallis and Futuna')
insert into @countries values (1599,'Polynesia (not Hawaii) nec')
insert into @countries values (1600,'Antarctica')
insert into @countries values (1601,'Antarctica Adelie Land (France)')
insert into @countries values (1602,'Antarctica Argentinian Territory')
insert into @countries values (1603,'Antarctica Australian Territory')
insert into @countries values (1604,'Antarctica British Territory')
insert into @countries values (1605,'Antarctica Chilean Territory')
insert into @countries values (1606,'Queen Maud Land (Norway)')
insert into @countries values (1607,'Ross Dependency (New Zealand)')
insert into @countries values (2000,'North-West Europe')
insert into @countries values (2100,'United Kingdom')
insert into @countries values (2101,'Channel Islands')
insert into @countries values (2102,'England')
insert into @countries values (2103,'Isle of Man')
insert into @countries values (2104,'Northern Ireland')
insert into @countries values (2105,'Scotland')
insert into @countries values (2106,'Wales') 
insert into @countries values (2201,'Ireland')
insert into @countries values (2300,'Western Europe')
insert into @countries values (2301,'Austria')
insert into @countries values (2302,'Belgium')
insert into @countries values (2303,'France')
insert into @countries values (2304,'Germany')
insert into @countries values (2305,'Liechtenstein')
insert into @countries values (2306,'Luxembourg')
insert into @countries values (2307,'Monaco')
insert into @countries values (2308,'Netherlands')
insert into @countries values (2311,'Switzerland')
insert into @countries values (2400,'Northern Europe')
insert into @countries values (2401,'Denmark')
insert into @countries values (2402,'Faeroe Islands')
insert into @countries values (2403,'Finland')
insert into @countries values (2404,'Greenland')
insert into @countries values (2405,'Iceland')
insert into @countries values (2406,'Norway')
insert into @countries values (2407,'Sweden')
insert into @countries values (3000,'Southern and Eastern Europe')
insert into @countries values (3100,'Southern Europe')
insert into @countries values (3101,'Andorra')
insert into @countries values (3102,'Gibraltar')
insert into @countries values (3103,'Holy See')
insert into @countries values (3104,'Italy')
insert into @countries values (3105,'Malta')
insert into @countries values (3106,'Portugal')
insert into @countries values (3107,'San Marino')
insert into @countries values (3108,'Spain')
insert into @countries values (3200,'South Eastern Europe')
insert into @countries values (3201,'Albania')
insert into @countries values (3202,'Bosnia and Herzegovina')
insert into @countries values (3203,'Bulgaria')
insert into @countries values (3204,'Croatia')
insert into @countries values (3205,'Cyprus')
insert into @countries values (3206,'Macedonia (FYROM)')
insert into @countries values (3207,'Greece')
insert into @countries values (3208,'Moldova')
insert into @countries values (3211,'Romania')
insert into @countries values (3212,'Slovenia')
insert into @countries values (3214,'Montenegro')
insert into @countries values (3215,'Serbia')
insert into @countries values (3300,'Eastern Europe')
insert into @countries values (3301,'Belarus')
insert into @countries values (3302,'Czech Republic')
insert into @countries values (3303,'Estonia')
insert into @countries values (3304,'Hungary')
insert into @countries values (3305,'Latvia')
insert into @countries values (3306,'Lithuania')
insert into @countries values (3307,'Poland')
insert into @countries values (3308,'Russia')
insert into @countries values (3311,'Slovakia')
insert into @countries values (3312,'Ukraine')
insert into @countries values (4000,'Nth Africa & Middle East')
insert into @countries values (4100,'North Africa')
insert into @countries values (4101,'Algeria')
insert into @countries values (4102,'Egypt')
insert into @countries values (4103,'Libya')
insert into @countries values (4104,'Morocco')
insert into @countries values (4105,'Sudan')
insert into @countries values (4106,'Tunisia')
insert into @countries values (4107,'Western Sahara')
insert into @countries values (4199,'North Africa nec')
insert into @countries values (4200,'Middle East')
insert into @countries values (4201,'Bahrain')
insert into @countries values (4202,'Gaza Strip and West Bank')
insert into @countries values (4203,'Iran')
insert into @countries values (4204,'Iraq')
insert into @countries values (4205,'Israel')
insert into @countries values (4206,'Jordan')
insert into @countries values (4207,'Kuwait')
insert into @countries values (4208,'Lebanon')
insert into @countries values (4211,'Oman')
insert into @countries values (4212,'Qatar')
insert into @countries values (4213,'Saudi Arabia')
insert into @countries values (4214,'Syria')
insert into @countries values (4215,'Turkey')
insert into @countries values (4216,'United Arab Emirates')
insert into @countries values (4217,'Yemen')
insert into @countries values (5000,'South-East Asia')
insert into @countries values (5100,'Mainland Sth-East Asia')
insert into @countries values (5101,'Burma (Myanmar)')
insert into @countries values (5102,'Cambodia')
insert into @countries values (5103,'Laos')
insert into @countries values (5104,'Thailand')
insert into @countries values (5105,'Vietnam')
insert into @countries values (5200,'Maritime Sth-East Asia')
insert into @countries values (5201,'Brunei Darussalam')
insert into @countries values (5202,'Indonesia')
insert into @countries values (5203,'Malaysia')
insert into @countries values (5204,'Philippines')
insert into @countries values (5205,'Singapore')
insert into @countries values (5206,'East Timor')
insert into @countries values (6000,'North-East Asia')
insert into @countries values (6100,'Chinese Asia (incl Mongolia)')
insert into @countries values (6101,'China (excl SARs and Taiwan)')
insert into @countries values (6102,'Hong Kong (SAR of China)')
insert into @countries values (6103,'Macau (SAR of China)')
insert into @countries values (6104,'Mongolia')
insert into @countries values (6105,'Taiwan')
insert into @countries values (6200,'Japan and the Koreas')
insert into @countries values (6201,'Japan')
insert into @countries values (6202,'Korea North')
insert into @countries values (6203,'Korea South')
insert into @countries values (7000,'Southern and Central Asia')
insert into @countries values (7100,'Southern Asia')
insert into @countries values (7101,'Bangladesh')
insert into @countries values (7102,'Bhutan')
insert into @countries values (7103,'India')
insert into @countries values (7104,'Maldives')
insert into @countries values (7105,'Nepal')
insert into @countries values (7106,'Pakistan')
insert into @countries values (7107,'Sri Lanka')
insert into @countries values (7200,'Central Asia')
insert into @countries values (7201,'Afghanistan')
insert into @countries values (7202,'Armenia')
insert into @countries values (7203,'Azerbaijan')
insert into @countries values (7204,'Georgia')
insert into @countries values (7205,'Kazakhstan')
insert into @countries values (7206,'Kyrgyz Republic')
insert into @countries values (7207,'Tajikistan')
insert into @countries values (7208,'Turkmenistan')
insert into @countries values (7211,'Uzbekistan')
insert into @countries values (8000,'Americas')
insert into @countries values (8100,'Northern America')
insert into @countries values (8101,'Bermuda')
insert into @countries values (8102,'Canada')
insert into @countries values (8103,'St Pierre and Miquelon')
insert into @countries values (8104,'United States of America')
insert into @countries values (8200,'South America')
insert into @countries values (8201,'Argentina')
insert into @countries values (8202,'Bolivia')
insert into @countries values (8203,'Brazil')
insert into @countries values (8204,'Chile')
insert into @countries values (8205,'Colombia')
insert into @countries values (8206,'Ecuador')
insert into @countries values (8207,'Falkland Islands')
insert into @countries values (8208,'French Guiana')
insert into @countries values (8211,'Guyana')
insert into @countries values (8212,'Paraguay')
insert into @countries values (8213,'Peru')
insert into @countries values (8214,'Suriname')
insert into @countries values (8215,'Uruguay')
insert into @countries values (8216,'Venezuela')
insert into @countries values (8299,'South America nec')
insert into @countries values (8300,'Central America')
insert into @countries values (8301,'Belize')
insert into @countries values (8302,'Costa Rica')
insert into @countries values (8303,'El Salvador')
insert into @countries values (8304,'Guatemala')
insert into @countries values (8305,'Honduras')
insert into @countries values (8306,'Mexico')
insert into @countries values (8307,'Nicaragua')
insert into @countries values (8308,'Panama')
insert into @countries values (8400,'Caribbean')
insert into @countries values (8401,'Anguilla')
insert into @countries values (8402,'Antigua and Barbuda')
insert into @countries values (8403,'Aruba')
insert into @countries values (8404,'Bahamas')
insert into @countries values (8405,'Barbados')
insert into @countries values (8406,'Cayman Islands')
insert into @countries values (8407,'Cuba')
insert into @countries values (8408,'Dominica')
insert into @countries values (8411,'Dominican Republic')
insert into @countries values (8412,'Grenada')
insert into @countries values (8413,'Guadeloupe')
insert into @countries values (8414,'Haiti')
insert into @countries values (8415,'Jamaica')
insert into @countries values (8416,'Martinique')
insert into @countries values (8417,'Montserrat')
insert into @countries values (8418,'Netherlands Antilles')
insert into @countries values (8421,'Puerto Rico')
insert into @countries values (8422,'St Kitts and Nevis')
insert into @countries values (8423,'St Lucia')
insert into @countries values (8424,'St Vincent and the Grenadines')
insert into @countries values (8425,'Trinidad and Tobago')
insert into @countries values (8426,'Turks and Caicos Islands')
insert into @countries values (8427,'Virgin Islands British')
insert into @countries values (8428,'Virgin Islands United States')
insert into @countries values (9000,'Sub-Saharan Africa')
insert into @countries values (9100,'Central and West Africa')
insert into @countries values (9101,'Benin')
insert into @countries values (9102,'Burkina Faso')
insert into @countries values (9103,'Cameroon')
insert into @countries values (9104,'Cape Verdi')
insert into @countries values (9105,'Central African Republic')
insert into @countries values (9106,'Chad')
insert into @countries values (9107,'Congo')
insert into @countries values (9108,'Congo Democratic Republic of')
insert into @countries values (9111,'Cote d''Ivoire')
insert into @countries values (9112,'Equatorial Guinea')
insert into @countries values (9113,'Gabon')
insert into @countries values (9114,'Gambia')
insert into @countries values (9115,'Ghana')
insert into @countries values (9116,'Guinea')
insert into @countries values (9117,'Guinea Bissau')
insert into @countries values (9118,'Liberia')
insert into @countries values (9121,'Mali')
insert into @countries values (9122,'Mauritania')
insert into @countries values (9123,'Niger')
insert into @countries values (9124,'Nigeria')
insert into @countries values (9125,'Sao Tome and Principe')
insert into @countries values (9126,'Senegal')
insert into @countries values (9127,'Sierra Leone')
insert into @countries values (9128,'Togo')
insert into @countries values (9200,'Southern and East Africa')
insert into @countries values (9201,'Angola')
insert into @countries values (9202,'Botswana')
insert into @countries values (9203,'Burundi')
insert into @countries values (9204,'Comoros')
insert into @countries values (9205,'Djibouti')
insert into @countries values (9206,'Eritrea')
insert into @countries values (9207,'Ethiopia')
insert into @countries values (9208,'Kenya')
insert into @countries values (9211,'Lesotho')
insert into @countries values (9212,'Madagascar')
insert into @countries values (9213,'Malawi')
insert into @countries values (9214,'Mauritius')
insert into @countries values (9215,'Mayotte')
insert into @countries values (9216,'Mozambique')
insert into @countries values (9217,'Namibia')
insert into @countries values (9218,'Reunion')
insert into @countries values (9221,'Rwanda')
insert into @countries values (9222,'St Helena')
insert into @countries values (9223,'Seychelles')
insert into @countries values (9224,'Somalia')
insert into @countries values (9225,'South Africa')
insert into @countries values (9226,'Swaziland')
insert into @countries values (9227,'Tanzania')
insert into @countries values (9228,'Uganda')
insert into @countries values (9231,'Zambia')
insert into @countries values (9232,'Zimbabwe')
insert into @countries values (9299,'Africa South and East')
 
insert into @countries values (922,'0922 Channel Islands, nfd')
insert into @countries values (924,'0924 Netherlands Antilles, nfd')
insert into @countries values (1513,'1513 Pitcairn Islands')
insert into @countries values (2107,'2107 Guernsey')
insert into @countries values (2108,'2108 Jersey')
insert into @countries values (2408,'2408 Aland Islands')
insert into @countries values (3216,'3216 Kosovo')
insert into @countries values (4108,'4108 Spanish North Africa')
insert into @countries values (4111,'4111 South Sudan')
insert into @countries values (8431,'8431 St Barthelemy')
insert into @countries values (8432,'8432 St Martin (French part)')
insert into @countries values (8433,'8433 Bonaire, Sint Eustatius and Saba')
insert into @countries values (8434,'8434 Curacao')
insert into @countries values (8435,'8435 Sint Maarten (Dutch part)')
insert into @countries values (922,'Channel Islands, nfd')
insert into @countries values (924,'Netherlands Antilles, nfd')
insert into @countries values (1513,'Pitcairn Islands')
insert into @countries values (2107,'Guernsey')
insert into @countries values (2108,'Jersey')
insert into @countries values (2408,'Aland Islands')
insert into @countries values (3216,'Kosovo')
insert into @countries values (4108,'Spanish North Africa')
insert into @countries values (4111,'South Sudan')
insert into @countries values (8431,'St Barthelemy')
insert into @countries values (8432,'St Martin (French part)')
insert into @countries values (8433,'Bonaire, Sint Eustatius and Saba')
insert into @countries values (8434,'Curacao')
insert into @countries values (8435,'Sint Maarten (Dutch part)')


if object_id('tempdb..#omis') is not null
 drop table #omis

  


SELECT DISTINCT TreatmentEvents.Pat_ID1,
	TreatmentEvents.PCP_GROUP_ID AS GroupID, 
    cast(replace(replace(replace(Demographics.SS_Number,'\',''),'/',''),' ','') as varchar(11))         AS MedicareNumber,			-- 001 medicare number
	TreatmentEvents.Inst_Abrv as HospitalCode, 
	ident_partial.IDC AS MRN, 
	ident_partial.IDA AS [UniqueIdentifier],    --AUID,  -- 003 patient area unique identifier
	Demographics.First_Name         AS GivenName1,   -- 004 first given name
    case when len(Demographics.Middle_Name) < 2 then null else  replace(Demographics.Middle_Name,',','') end  AS GivenName2,   -- 005 second given name
    Demographics.Last_Name          AS Surname, 
    NULL                            AS AliasSurname,	-- 007 alias surname
    case Demographics.Gender when 'M' then 1
		when 'Male' then 1
		when 'F' then 2
		when 'Female' then 2 
		when 'Indetermine' then 3
		when 'Unknown' then 9
		else 9
	end as   Sex,
    cast( Demographics.Birth_DtTm as date) AS DateOfBirth, 
	replace(Demographics.Birth_Place,',','')     AS Birth_Place_original, 
	replace(isnull(Demographics.Birth_Place_SACC,3),',','')       AS COBCodeSACC,   -- Demographics.Birth_Place        AS Birth_Place, 
    --Demographics.Alias_Name         AS AliasGivenName1, 
    case when rtrim(Demographics.Pat_Adr1) = rtrim(Demographics.Pat_Adr2) then rtrim(Demographics.Pat_Adr1) else rtrim(replace(Demographics.Pat_Adr1 +' '+ Demographics.Pat_Adr2,',',' ')) end AS WayfareAddress,  -- UsualResidentialAddress,
    replace(Demographics.Pat_City,',',' ')           AS Locality,
    Demographics.Pat_Postal         AS Postcode,
	Demographics.Pat_State          AS WayfareStateID_original,
	Demographics.Pat_State_code          AS WayfareStateID,
	Demographics.indigenous_status               AS IndigenousStatusID_original,
	isnull(indigenious.code,9) as IndigenousStatusID,
	--external_staff.GPAHPRA			 AS AmoRegReferringNumber,   -- AMO_AHPRARegNumberGP, 
	--external_staff.GPName                      AS DoctorName,	-- 024 GP's name 
	staff_details.OncAHPRA	 AS AmoRegReferringNumber,    -- oncologist
	staff_details.OncName      AS DoctorName,			 -- oncologist
	--TreatmentEvents.address1 + ', ' + TreatmentEvents.address2 + ', ' + TreatmentEvents.locality + ', ' + TreatmentEvents.State_Province + ' ' + TreatmentEvents.Postal AS AddressOnc, 
    TreatmentEvents.CellPhone         AS TreatingFacilityCode,  -- HospitalID,     -- Hospital number      /* User Defined Entries (Location Not Decided Yet)*/ 
    --TreatmentEvents.pager           AS FacilityCode,   -- DepartmentID,   	-- 030 cancer department number        /* User Defined Entries (Location Not Decided Yet)*/ 
    TreatmentEvents.pager as FacilityCode,	 -- +' '+TreatmentEvents.CancerClinic 	-- Orange specific, cancer clinic under facility layer
	cast( MedicalRecords.Dx_DtTm1 as date)   AS	DateOfDiagnosis,	 --   convert(varchar(10), isnull(MedicalRecords.Dx_DtTm1,null),103)         	 -- PrimaryDiagnosisDate, 
	MedicalRecords.Topography1  AS	CancerSiteCodeID,		-- PrimarySiteOfCancerCode,  
    CASE WHEN MedicalRecords.Diag_Type1 = 4 THEN 'ICDO3' -- TODO confirm this 
		WHEN MedicalRecords.Diag_Type1 = 2 THEN (case when MedicalRecords.Dx_DtTm1 between '01-Jul-1998' and '30-Jun-2000' then 'ICD10V1'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2000' and '30-Jun-2002' then 'ICD10V2'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2002' and '30-Jun-2004' then 'ICD10V3'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2004' and '30-Jun-2006' then 'ICD10V4'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2006' and '30-Jun-2008' then 'ICD10V5'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2008' and '30-Jun-2010' then 'ICD10V6'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2010' and '30-Jun-2013' then 'ICD10V7'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2013' and '30-Jun-2015' then 'ICD10V8'
													when MedicalRecords.Dx_DtTm1 between '01-Jul-2015' and '30-Jun-2017' then 'ICD10V9'
													when MedicalRecords.Dx_DtTm1 >= '01-Jul-2017'  then 'ICD10V10' 
													else 'ICD10V9'  end )
		ELSE 'ICD10V9' 
	END AS CancerSiteCodeIDVersion,   ---PrimarySiteOfCancerVersion, --(MOSAIQ>=2.41) 
    CASE WHEN MedicalRecords.Histology is not null and MedicalRecords.Diag_Type1 in (2,4) THEN 'ICDO3' -- TODO confirm this 
		WHEN MedicalRecords.Histology is not null then  'ICDO3' -- TODO confirm this 
		ELSE Null
	END AS MorphologyCodeIDVersion, 
	MedicalRecords.Diag_Confirm1     AS BestBasisOfDiagnosisID_original,  
	cancerdiagnosis.code as BestBasisOfDiagnosisID,
	MedicalRecords.Paired_Organ     AS Laterality_original,	-- 035 laterality of primary cancer
	laterality.code as Laterality,
	case isnumeric(MedicalRecords.Hist_Grade) when 1 then MedicalRecords.Hist_Grade else null end   AS HistopathologicalGradeID,	-- 036 histopathalogical grade 
    MedicalRecords.Histology        AS MorphologyCodeID,	-- 037 morphology code       --'ICDO3'  AS MorphologyCodeVersion, 
	9  AS DegreeOfSpreadID,		-- if Medical.Dist_Mets_1 != '' then 4  else 9 

	cast(coalesce(staging.Date_Staged_DtTm, staging.edit_dttm, staging.Dx_DtTm1) as date)          AS TNMStagingDate,
	staging.T_Stage1          AS TStageID_original,
	staging.N_Stage1          AS NStageID_original,
	staging.M_Stage1          AS MStageID_original,
	staging.T_Stage1          AS TStageID,
	staging.N_Stage1          AS NStageID,
	staging.M_Stage1          AS MStageID,
	--staging.combined_stage    AS TNMStagingGroupID,
	stagegroup.name    AS TNMStagingGroupID,
	case staging.StageType1 when 0 then 'C' when 1 then 'P' else null end  AS TNMStagingBasisID,
	null   AS OtherStagingDate,   --convert(varchar(10), isnull(everything.other_stage_DtTm ,'01-01-9999'),103)      AS OtherStagingDate,
	null    AS OtherStagingSchemeID,
	null     AS OtherStagingGroupID,	-- 059 other staging grouping code
	null     AS OtherStagingBasisID,
 
	TreatmentEvents.Tx_Intent    AS  EpisodeIntentID_original,  -- TreatmentReasonID,	-- 062 intention of treatment
	isnull(episodeintent.code,9) as EpisodeIntentID,
	case TreatmentEvents.row when 1 then 1 else 2 end AS InitialTreatmentFlag,  --Indicator,
    CASE WHEN first_admin.first_admin_date is not null	THEN cast(first_admin.first_admin_date as date)
		 --WHEN TreatmentEvents.DI_DtTm < TreatmentEvents.Start_Date	THEN cast(TreatmentEvents.DI_DtTm as date)
		 ELSE cast(TreatmentEvents.Start_Date as date) 
    END as EpisodeStartDate,  --SystemicTherapyStartDate,		-- 067 treatment start date
	--cast(first_admin.first_admin_date as date) as EpisodeStartDate, 
  --  CASE WHEN  last_admin.last_admin_date is not null THEN cast(last_admin.last_admin_date as date)
		--when TreatmentEvents.Discontinue_DtTm is not null then cast(TreatmentEvents.Discontinue_DtTm as date)
		--ELSE cast(TreatmentEvents.End_Date as date) 
  --  END  AS EpisodeEndDate,   -- SystemicTherapyEndDate,  	-- 068 treatment end date
	cast(last_admin.last_admin_date as date) AS EpisodeEndDate,
   -- CASE WHEN TreatmentEvents.Discontinue_DtTm IS NOT NULL and last_admin.last_admin_date is not null and cast(TreatmentEvents.Discontinue_DtTm as date) < cast(last_admin.last_admin_date as date) THEN TreatmentEvents.delivered_instances 
		 --else last_admin.last_cycle_number
   -- END  AS AntiNeoplasticCycles,   -- SystemicTherapyEndDate,  	-- 068 treatment end date
   last_admin.last_cycle_number  AS AntiNeoplasticCycles,
	TreatmentEvents.Regimen         AS ProtocolID,   -- SystemicTherapyProtocolID, eviQ protocal ID
    drugs.regimen_cycle_number   AS NotificationEpisodeChemoCycle,   --SystemicTherapyProtocolCycleNo,	-- 071 reported cycle number   , drug number
	drugs.drug_name        AS OMISDrugName,   --SystemicTherapyDrug,		-- 072 systemic therapy drug name 
	drugs.dose1             AS NotificationEpisodeChemoDose,   --SystemicTherapyDose,	-- 073 Dose 
	drugs.route            AS NotificationEpisodeChemoRouteID_original,   --SystemicTherapyRoute,	-- 074 Route 
	drugadminroute.code  AS NotificationEpisodeChemoRouteID,
	cast(drugs.start_date1 as date)  AS NotificationEpisodeChemoStartDate,   --SystemicTherapyStart, 
	cast(drugs.end_date1  as date)   AS NotificationEpisodeChemoEndDate,   --SystemicTherapyEnd, 
	drugs.frequency1        AS NotificationEpisodeChemoFrequency,   --SystemicTherapyFrequency, 
	drugs.frequency_unit   AS NotificationEpisodeChemoFrequencyUnit,   --SystemicTherapyFrequencyUnit,
	drugs.day_of_week      AS NotificationEpisodeChemoDay,   --SystemicTherapyDay,s
    cast(MedicalRecords.ReferralDate1  as date) AS ReferralDate,
    cast(MedicalRecords.Diag_DtTm1  as date)  AS ConsultationDate,
    cast(MedicalRecords.DtTm_Reg  as date)  AS ClinicalTrialDate,   --FirstClinicalTrialDate,
    MedicalRecords.Trial_Short_Desc AS ClinicalTrialName,	--FirstClinicalTrialName,	-- 106 name of trial
    cast(ISNULL(MedicalRecords.Act_DtTm1,MedicalRecords.MDTLetterDate) as date) AS MDTDate,	-- 107 date of MDT consultation 
    cast(MedicalRecords.PalativeDate as date)  AS ReferralToPalliativeCareDate,    --DateOfReferalToPalliativeCare, 
	cast(Assessment1.Obs_DtTm as date)  AS PerformanceStatusDate, 
    MAX(Assessment1.ecog_value) OVER (PARTITION BY Demographics.Pat_ID1,TreatmentEvents.Start_DtTm1) AS PerformanceStatus,
	TreatmentEvents.CPL_ID,
	TreatmentEvents.CPlan_Name,
	TreatmentEvents.Regimen,
	cast(NULL as date) as InitConsultDate
into #omis
FROM
-- in each part of the query we get the Patient Demographic data, as that has to remain constant, and combine it with one of the other queries.
-- the three non-used queries are saved as null
-- hopefully the database is smart enough to only run the Demographic query once.
( 
  (
/* ------------------------------ Treatment Events Query ---------------------------------------- */
		(SELECT DISTINCT patient_care_plan.PCP_ID, 
			patient_care_plan.Pat_ID1, 
			patient_care_plan.Med_ID, 
			patient_care_plan.MD_ID, 
			patient_care_plan.CPL_ID, 
			patient_care_plan.Tx_Intent, 
			initial_treatment.row,
			patient_care_plan.Protocol, 
			patient_care_plan.Chemo, 
			patient_care_plan.Hormone, 
			patient_care_plan.Immuno, 
			patient_care_plan.Start_DtTm1, 
			patient_care_plan.End_DtTm1,
			patient_care_plan.Discontinue_DtTm, 
			patient_care_plan.PCP_GROUP_ID, 
			patient_care_plan.delivered_instances,
			patient_care_plan.CPlan_Name, 
			patient_care_plan.Regimen, 
			patient_care_plan.Start_Date, 
			patient_care_plan.End_Date, 
			patient_care_plan.DI_DtTm, --patient_care_plan.End_DtTm1, --Debug
			TreatmentLocation.Inst_ID, 
			TreatmentLocation.Phone_Ex, 
			TreatmentLocation.Pager, 
			TreatmentLocation.CellPhone, 
			TreatmentLocation.Inst_Abrv,
			TreatmentLocation.address1, 
			TreatmentLocation.address2, 
			TreatmentLocation.locality, 
			TreatmentLocation.State_Province, 
			TreatmentLocation.Postal, 
			TreatmentLocation.Display_ID
		--	rtrim(TreatmentLocation.dept)+' '+ltrim(TreatmentLocation.location_name) as CancerClinic
		FROM 
		(SELECT PatCPlan.PCP_ID, 
				PatCPlan.Pat_ID1, 
				PatCPlan.Med_ID,  
				--PatCPlan.MD_ID,
				doctors_id.MD_ID,
				PatCPlan.CPL_ID, 
				PatCPlan.Tx_Intent,
				PatCPlan.Protocol, 
				PatCPlan.Chemo, 
				PatCPlan.Hormone, 
				PatCPlan.Immuno,
				CycleEffDate.Start_DtTm1, 
				CycleEffDate.End_DtTm1, 
				PatCPlan.Discontinue_DtTm, 
				CycleEffDate.Start_Date, 
				CycleEffDate.End_Date, 
				CycleEffDate.DI_DtTm, 
				care_plan1.CPlan_Name, 
				care_plan1.Regimen, 
				CycleEffDate.PCP_GROUP_ID,
				MAX(CycleEffDate.This_Instance) OVER (PARTITION BY CycleEffDate.PCP_GROUP_ID) AS delivered_instances,
				CycleEffDate.Inst_ID
			FROM dbo.PatCPlan with (nolock)
			join 
			(SELECT DISTINCT RealDate.PCP_ID, 
					RealDate.PCP_GROUP_ID, 
					RealDate.DI_DtTm,
					RealDate.This_Instance,
					RealDate.Inst_ID,
					MIN(RealDate.Adm_DtTm) OVER (PARTITION BY RealDate.PCP_ID) AS Start_DtTm1, 
					MAX(RealDate.End_DtTm1) OVER (PARTITION BY RealDate.PCP_ID) AS End_DtTm1,
					MIN(RealDate.Adm_DtTm) OVER (PARTITION BY RealDate.PCP_GROUP_ID) AS Start_Date,
					MAX(RealDate.End_DtTm) OVER  (PARTITION BY RealDate.PCP_GROUP_ID) AS End_Date
				FROM
				(SELECT MIN(PatCPlan.Eff_DtTm) OVER (PARTITION BY PatCPlan.PCP_GROUP_ID) AS DI_DtTm
						, PatCPlan.PCP_GROUP_ID
						, PatCPlan.PCP_ID
						, PatCPlan.End_DtTm
						, PatCPlan.This_Instance
						, pharmacy_administration.Adm_DtTm
						, (pharmacy_administration.Adm_DtTm + (CPlan.Cycle_Length - isnull(CPItem.Day_Offset,0)) - 1) AS End_DtTm1
						, CASE WHEN dbo.fn_TestMask(care_plan_activity.Type1, 1) = 1 
							THEN pharmacy_administration.Adm_DtTm 
							END AS End_Date2
						,patient_care_item.Inst_ID
					FROM  dbo.PatCPlan with (nolock)
						INNER JOIN dbo.CPlan with (nolock) ON PatCPlan.CPL_ID = CPlan.CPL_ID 
						INNER JOIN dbo.Orders AS pharm_orders with (nolock) ON PatCPlan.Pat_ID1 = pharm_orders.Pat_ID1 and  pharm_orders.Cycle_Number IS NOT NULL
							AND pharm_orders.Cycle_Day IS NOT NULL 
							AND pharm_orders.PCI_ID IS NOT NULL  
							AND pharm_orders.Version = 0 
							--AND pharm_orders.Status_Enum NOT IN (1)
						INNER JOIN dbo.PharmAdm AS pharmacy_administration with (nolock) ON PatCPlan.Pat_ID1 = pharmacy_administration.Pat_ID1 AND pharm_orders.ORC_SET_ID = pharmacy_administration.ORC_SET_ID
							and  pharmacy_administration.Version = 0 
							AND pharmacy_administration.Adm_DtTm IS NOT NULL 
							--AND pharmacy_administration.Status_Enum NOT IN (1)
						INNER JOIN PatCItem AS patient_care_item with (nolock) ON PatCPlan.Pat_ID1 = patient_care_item.Pat_ID1 AND patient_care_item.PCI_ID = pharm_orders.PCI_ID AND patient_care_item.PCP_ID = PatCPlan.PCP_ID
						LEFT OUTER JOIN CPItem with (nolock) ON patient_care_item.CPI_ID = CPItem.CPI_ID
						INNER JOIN CPAct AS care_plan_activity with (nolock) ON care_plan_activity.CPA_ID = pharm_orders.CPA_ID
							--and (dbo.fn_TestMask(care_plan_activity.Type1, 1) = 1   or dbo.fn_TestMask(care_plan_activity.Type1, 4) = 4)
				) AS RealDate
			) AS CycleEffDate on PatCPlan.PCP_ID = CycleEffDate.PCP_ID	and (CONVERT(date,CycleEffDate.End_DtTm1) BETWEEN @startdate AND dateadd(d,1,@enddate))			/* Start/End Date Of The Cycles & Protocols */                                
			--) AS CycleEffDate on PatCPlan.PCP_ID = CycleEffDate.PCP_ID	and (CONVERT(date,CycleEffDate.Start_DtTm1) BETWEEN @startdate AND dateadd(d,1,@enddate))			/* Start/End Date Of The Cycles & Protocols */                                
			join CPlan  AS care_plan1 with (nolock) on care_plan1.CPL_ID = PatCPlan.CPL_ID
			--join (SELECT PCP_ID, MAX(PCP_ID) OVER (PARTITION BY PCP_Group_ID) AS max_pcp_id, PCP_Group_ID, MD_ID FROM PatCPlan) AS doctors_id 
			join (SELECT PCP_ID, PCP_Group_ID, MD_ID FROM PatCPlan with (nolock) where This_Instance = 1) AS doctors_id 
				on doctors_id.PCP_Group_ID = PatCPlan.PCP_Group_ID --AND doctors_id.PCP_ID = doctors_id.max_pcp_id
			WHERE (PatCPlan.Discontinue_DtTm IS NULL 
				OR PatCPlan.Discontinue_DtTm >= CycleEffDate.Start_DtTm1)
				and ((CycleEffDate.Start_Date <= CycleEffDate.End_Date) or (CycleEffDate.DI_DtTm <= CycleEffDate.End_Date))
		) AS patient_care_plan 
		LEFT OUTER JOIN       
				(SELECT distinct attendance_table_2.Pat_ID1, 
				--	attendance_table_2.location_name,  
					attendance_table_2.Inst_ID, 
					Config.pager,
					Config.Phone_Ex, 
					config.Inst_Abrv,
					Config.CellPhone, 
					RTRIM(Config.Adr1) AS address1, 
					RTRIM(Config.Adr2) AS address2, 
					RTRIM(Config.City) AS locality, 
					Config.State_Province, 
					Config.Postal, 
					Config.Display_ID ,
					config.Inst_Abrv AS DEPT
				from (select Pat_ID1, Inst_ID, COUNT(Inst_ID) AS total, ROW_NUMBER() OVER (PARTITION BY Pat_ID1 ORDER BY COUNT(Inst_ID) DESC ) AS row
						FROM schedule with (nolock), Staff with (nolock)					/*** look for the most frequent location **/
						where Schedule.Location = Staff.Staff_ID
							and schedule.version = 0
						group by Pat_ID1, Inst_ID
						--order by 1,2
					) AS attendance_table_2
					join Config with (nolock) on Config.Inst_ID = attendance_table_2.Inst_ID and attendance_table_2.row = 1 
			) AS TreatmentLocation ON TreatmentLocation.Pat_ID1 = patient_care_plan.Pat_ID1 --and TreatmentLocation.Inst_ID = patient_care_plan.Inst_ID
		LEFT OUTER JOIN
		--(select *
		--from ( select PatCPlan.PCP_Group_ID
		--			,ROW_NUMBER() OVER (partition by CASE WHEN Medical.Diagnosis_Class in (5,2) AND Medical.Related_MED_ID is not NULL THEN Medical.Related_MED_ID ELSE Medical.MED_ID END order by PatCPlan.Eff_DtTm ASC) as row   -- initial treatment
		--			,min(PatCPlan.Eff_DtTm) OVER (partition by CASE WHEN Medical.Diagnosis_Class in (5,2) AND Medical.Related_MED_ID is not NULL THEN Medical.Related_MED_ID ELSE Medical.MED_ID END ) as row2    --order by PatCPlan.Eff_DtTm ASC) as row2   -- initial treatment
		--		from PatCPlan
		--			join Medical on PatCPlan.MED_ID = Medical.MED_ID
		--			join CPlan on PatCPlan.CPL_ID = CPlan.CPL_ID
		--		where PatCPlan.PCP_ID = PatCPlan.PCP_Group_ID 
		--			AND CPlan.Intervention = 1  
		--	) AS iit
		--where row2 BETWEEN @startdate AND dateadd(d,1,@enddate)
		(select  PCP_Group_ID,  1 AS row  --p.Pat_ID1, p.MED_ID,
		from PatCPlan p  with (nolock)
			join (select p.Pat_ID1, p.MED_ID, min(p.Eff_DtTm) as Eff_DtTm
				from Medical m with (nolock)
					join PatCPlan p with (nolock) on m.MED_ID = p.MED_ID
					join CPlan c with (nolock) on p.CPL_ID = c.CPL_ID
				where m.Related_MED_ID is null
					and m.Diagnosis_Class = 1 
					and c.Intervention = 1
					and p.Status_Enum in (2,3,5,23)
				group by p.Pat_ID1, p.MED_ID
				--having  min(p.Eff_DtTm) between @startdate and dateadd(d,1,@enddate)
					) a on p.Pat_ID1 = a.Pat_ID1 and p.MED_ID = a.MED_ID and p.Eff_DtTm = a.Eff_DtTm 
		and p.Status_Enum in (2,3,5,23)
		) as initial_treatment ON initial_treatment.PCP_Group_ID = patient_care_plan.PCP_Group_ID
	) AS TreatmentEvents 

	left join @episodeintent episodeintent on episodeintent.name = TreatmentEvents.Tx_Intent

	LEFT OUTER JOIN
	/* ------------------------------ Assessment Query --------------------------------------------- */
	(SELECT coalesce(PrePivotAssessment1.Pat_ID1,PrePivotAssessment2.Pat_ID1) as patient
		, PrePivotAssessment1.ChoiceValue AS ecog_value    --
		, PrePivotAssessment1.Obs_DtTm						--
		, PrePivotAssessment2.ChoiceValue AS Treatment_Outcome
		FROM 
		( SELECT observation_request.OBR_ID
				, observation_request.Pat_ID1
				, observation_definition.OBD_ID
				, observation_request.Obs_DtTm

				, observation_definition.Label
				, observation_definition2nd.Label AS ChoiceValue
				--, MAX(observation_definition2nd.ChoiceLabel) OVER (PARTITION BY observation_request.Pat_ID1,observation_definition.Label) AS RowNum
				, ROW_NUMBER() OVER (PARTITION BY observation_request.Pat_ID1,observation_definition.Label ORDER BY observation_definition2nd.Label DESC) AS RowNum
			FROM  Observe AS Observe1 with (nolock)
				INNER JOIN ObsDef AS observation_definition with (nolock) ON Observe1.OBD_ID = observation_definition.OBD_ID and observation_definition.tbl in (select tbl from obsdef with (nolock) where label in ('ECOG Status', 'ECOG Performance Status', 'Performance Status'))
				INNER JOIN ObsDef AS observation_definition2nd with (nolock) ON Observe1.Obs_Choice = observation_definition2nd.OBD_ID
				INNER JOIN ObsReq AS observation_request with (nolock) ON observation_request.Pat_ID1 = Observe1.Pat_ID1 AND observation_request.OBR_ID = Observe1.OBR_SET_ID and observation_request.Version = 0 AND observation_request.Status_Enum NOT IN (1)
			WHERE  CONVERT(date,observation_request.Obs_DtTm) between @startdate AND dateadd(d,1,@enddate)
		) AS PrePivotAssessment1
		FULL OUTER JOIN 
		(SELECT observation_request.OBR_ID
				, observation_request.Pat_ID1
				, observation_definition.OBD_ID
				, observation_request.Obs_DtTm
				, observation_definition.Label
				, observation_definition2nd.Label AS ChoiceValue
				, ROW_NUMBER() OVER (PARTITION BY observation_request.Pat_ID1,observation_definition.Label ORDER BY observation_definition2nd.Label DESC) AS RowNum
			FROM  Observe AS Observe1 with (nolock)
				INNER JOIN  ObsDef AS observation_definition with (nolock) ON Observe1.OBD_ID = observation_definition.OBD_ID and observation_definition.tbl in (select tbl from obsdef with (nolock) where label = 'performance status')
				INNER JOIN  ObsDef AS observation_definition2nd with (nolock) ON Observe1.Obs_Choice = observation_definition2nd.OBD_ID
				INNER JOIN  ObsReq AS observation_request with (nolock) ON observation_request.Pat_ID1 = Observe1.Pat_ID1 AND observation_request.OBR_ID = Observe1.OBR_SET_ID and  observation_request.Version = 0 AND observation_request.Status_Enum NOT IN (1)
			WHERE CONVERT(date,observation_request.Obs_DtTm) between @startdate AND dateadd(d,1,@enddate)
		) AS PrePivotAssessment2 ON PrePivotAssessment2.pat_id1 = PrePivotAssessment1.Pat_ID1
		WHERE (PrePivotAssessment1.RowNum = 1 or PrePivotAssessment1.RowNum IS NULL)
			AND (PrePivotAssessment2.RowNum = 1 or PrePivotAssessment2.RowNum IS NULL)
	) AS Assessment1 ON TreatmentEvents.Pat_ID1 = Assessment1.patient
	/* ------------------------------ Demographic Query -------------------------------------------- */
	LEFT OUTER JOIN
	(SELECT patient_details.Pat_ID1, 
		patient_details.SS_Number, 
		patient_details.Salutation, 
		patient_details.First_Name, 
		patient_details.Middle_Name, 
		patient_details.Last_Name, 
		patient_details.Alias_Name, 
		patient_details.Birth_DtTm, 
		Admin1.Gender, 
		Admin1.Birth_Place, 
		cc.code as Birth_Place_SACC,
		Admin1.Pat_Adr1, 
		Admin1.Pat_Adr2, 
		Admin1.Pat_City, 
		Admin1.Pat_State, 
		isnull(ss.code,'99') as Pat_State_code, 
		Admin1.Pat_Postal,		
		CASE WHEN Admin1.Race != '' THEN Admin1.Race ELSE CASE WHEN Race_prompt.Text IS NOT NULL THEN Race_prompt.Text ELSE Ethnicity_prompt.text END END AS indigenous_status,
		Admin1.Expired_DtTm, 
		Admin1.Ref_Md2_ID as GP_ID
	FROM Patient AS patient_details with (nolock)
		join Admin as admin1 with (nolock) on patient_details.Pat_ID1 = Admin1.Pat_ID1
		LEFT OUTER JOIN 
			( SELECT ADM_ID, MAX(PRO_ID) AS PRO_ID_m
				FROM Race with (nolock)
				GROUP BY ADM_ID
			) AS partial_race ON Admin1.ADM_ID = partial_race.ADM_ID
		LEFT OUTER JOIN Prompt AS Race_prompt with (nolock) ON Race_prompt.Pro_ID = partial_race.PRO_ID_m
		LEFT OUTER JOIN prompt AS Ethnicity_prompt with (nolock) ON Ethnicity_prompt.Pro_ID = Admin1.Ethnicity_PRO_ID
		left join @countries cc on cc.name = Admin1.Birth_Place
		left join @states ss on ss.name = Admin1.Pat_State
	) AS Demographics
	ON Demographics.Pat_ID1 = TreatmentEvents.Pat_ID1
	left join @indigenious indigenious on indigenious.name = Demographics.indigenous_status
	/* ------------------------------ Medical Records Query ---------------------------------------- */
	LEFT OUTER JOIN
	(
		SELECT Medical1.MED_ID, 
			Medical1.Pat_ID1, 
			Medical1.Diagnosis_Class, 
			PalativeDate.Encounter_DtTm AS PalativeDate, 
			MDT1.Act_DtTm1,
			Medical1.Topography1, 
			Medical1.Diag_Type1, 
			Medical1.Diag_Confirm1, 
			Medical1.Paired_Organ, 
			Medical1.Hist_Grade, 
			Medical1.Histology,
			Medical1.Dx_DtTm1, 
			Medical1.RDx_DtTm2, 
			--Medical1.Diag_DtTm1, 
			consultation.Act_DtTm1 AS Diag_DtTm1,
			Medical1.RDiag_DtTm2, 
			Medical1.RDiag_Confirm2, 
			Medical1.RTopography2, 
			Medical1.RDiag_Type2,
			patient_trial.Trial_Short_Desc, 
			patient_trial.DtTm_Reg, 
			ReferralDateTable.Eff_DtTm1 AS ReferralDate1, 
			ConsentDate.Encounter_DtTm AS ConsentDate, 
			MDTLetterDate.Encounter_DtTm AS MDTLetterDate, 
			Medical1.Dist_Mets_1
		FROM ( 
			SELECT Medical.MED_ID, 
				Medical.Pat_ID1, 
				Medical.Paired_Organ,
				Medical.Histology, 
				Medical.Hist_Grade, 
				Medical.Diagnosis_Class, 
				Medical.Dist_Mets_1, 
				
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Dx_Partial_DtTm  ELSE Medical.Dx_Partial_DtTm END AS RDx_DtTm2,		-- class 5 = re-occurence , 2 = related
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Diag_Confirm		ELSE Medical.Diag_Confirm END AS RDiag_Confirm2,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Dx_Partial_DtTm  ELSE Medical.Dx_Partial_DtTm END AS RDiag_DtTm2,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN TopogP.Diag_Code				ELSE Topog.Diag_Code  END AS RTopography2, --(MOSAIQ>=2.41)
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN TopogP.Diag_Type				ELSE Topog.Diag_Type END AS RDiag_Type2, --(MOSAIQ>=2.41)
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Dx_Partial_DtTm  ELSE Medical.Dx_Partial_DtTm  END AS Dx_DtTm1,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Diag_Confirm		ELSE Medical.Diag_Confirm  END AS Diag_Confirm1,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Dx_Partial_DtTm  ELSE Medical.Dx_Partial_DtTm  END AS Diag_DtTm1_old,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Diag_Partial_DtTm  ELSE  Medical.Diag_Partial_DtTm  END AS Diag_DtTm1,
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN TopogP.Diag_Code				ELSE Topog.Diag_Code END AS Topography1, --(MOSAIQ>=2.41)
				--CASE WHEN Medical.Diagnosis_Class in (5,2) THEN TopogP.Diag_Type				ELSE Topog.Diag_Type END AS Diag_Type1 --(MOSAIQ>=2.41) 
				
				Medical.Dx_Partial_DtTm AS RDx_DtTm2,		-- class 5 = re-occurence , 2 = related
				Medical.Diag_Confirm  AS RDiag_Confirm2,
				Medical.Dx_Partial_DtTm  AS RDiag_DtTm2,
				Topog.Diag_Code   AS RTopography2, --(MOSAIQ>=2.41)
				Topog.Diag_Type  AS RDiag_Type2, --(MOSAIQ>=2.41)
				Medical.Dx_Partial_DtTm   AS Dx_DtTm1,
				Medical.Diag_Confirm   AS Diag_Confirm1,
				Medical.Dx_Partial_DtTm   AS Diag_DtTm1_old,
				Medical.Diag_Partial_DtTm   AS Diag_DtTm1,
				Topog.Diag_Code  AS Topography1, --(MOSAIQ>=2.41)
				Topog.Diag_Type  AS Diag_Type1 --(MOSAIQ>=2.41) 

			FROM Medical  with (nolock)
			--left join Medical AS MedicalPrimary with (nolock) ON MedicalPrimary.MED_ID = Medical.Related_MED_ID and MedicalPrimary.Related_MED_ID  is null and MedicalPrimary.Diagnosis_Class = 1  --- = MedicalPrimary.MED_ID and MedicalPrimary.Related_MED_ID IS NOT NULL
			left join Topog with (nolock) on Medical.TPG_ID = Topog.TPG_ID  -- and (topog.Diag_Code like 'B%' or topog.Diag_Code like 'C%' or topog.Diag_Code like 'D%' or topog.Diag_Code like 'L%')
			--left join Topog as TopogP with (nolock) on MedicalPrimary.TPG_ID = TopogP.TPG_ID -- and (TopogP.Diag_Code like 'B%' or TopogP.Diag_Code like 'C%' or TopogP.Diag_Code like 'D%' or TopogP.Diag_Code like 'L%')
			--where medical.Edit_DtTm BETWEEN @startdate AND dateadd(d,1,@enddate)
		) AS Medical1 
		LEFT OUTER JOIN 
		(SELECT PatTrial.Pat_ID1, Trial1.Trial_Short_Desc, Trial1.TRL_ID, PatTrial.DtTm_Reg as DtTm_Reg, 
			ROW_NUMBER() OVER (PARTITION BY PatTrial.Pat_ID1 ORDER BY PatTrial.DtTm_Reg asc, Trial1.TRL_ID asc) AS RowNum
			FROM  PatTrial  with (nolock)
			join Trial  AS Trial1 with (nolock) on PatTrial.TRL_ID = Trial1.TRL_ID 
			join Medical with (nolock) ON Medical.Pat_ID1 = PatTrial.Pat_ID1
			left join Medical AS MedicalPrimary with (nolock) ON MedicalPrimary.MED_ID = Medical.Related_MED_ID and MedicalPrimary.Related_MED_ID  is null and MedicalPrimary.Diagnosis_Class = 1
			where  PatTrial.Version = 0
		--	  and PatTrial.DtTm_Reg >= CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Diag_DtTm  ELSE  Medical.Diag_DtTm  END  -- after date of diagnosis
			  and PatTrial.DtTm_Reg >= CASE WHEN Medical.Diagnosis_Class in (5,2) THEN MedicalPrimary.Diag_partial_DtTm  ELSE  Medical.Diag_partial_DtTm  END  -- after date of diagnosis
			--group by PatTrial.Pat_ID1, Trial1.Trial_Short_Desc
		) AS patient_trial ON Medical1.Pat_ID1 = patient_trial.Pat_ID1 and patient_trial.RowNum = 1    
		LEFT OUTER JOIN

		(SELECT Object.Pat_ID1, min(Object.Encounter_DtTm) as Eff_DtTm1  
			FROM Object with (nolock)
			WHERE Object.Status_Enum IN (3,5,7,8,9,13) 
				AND Object.Version = 0 
				AND Object.DocType IN (Select Prompt.Enum FROM Prompt with (nolock) WHERE Prompt.Text like 'Referral%') 
			group by Object.Pat_ID1
		) AS ReferralDateTable ON Medical1.Pat_ID1 = ReferralDateTable.Pat_ID1 
		LEFT OUTER JOIN
		(SELECT Object.Pat_ID1, max(Object.Encounter_DtTm) as Encounter_DtTm 
			FROM Object with (nolock)
			WHERE Object.Status_Enum IN (3,5,7,8,9) 
				AND Object.Version = 0 
				AND Object.DocType IN (Select Prompt.Enum FROM Prompt with (nolock) WHERE Prompt.Text IN ('Chemo Consent Form'))
			group by Object.Pat_ID1
		) AS ConsentDate ON Medical1.Pat_ID1 = ConsentDate.Pat_ID1 
		LEFT OUTER JOIN
		(SELECT Object.Pat_ID1, max(Object.Encounter_DtTm) as Encounter_DtTm 
			FROM Object with (nolock)
			WHERE Object.Status_Enum IN (3,5,7,8,9,13) 
				AND Object.Version = 0 
				AND Object.DocType IN (Select Prompt.Enum FROM Prompt with (nolock) WHERE Prompt.Text  IN ('MDT','MDT Notes'))
			group by Object.Pat_ID1
		) AS MDTLetterDate ON Medical1.Pat_ID1 = MDTLetterDate.Pat_ID1 
		LEFT OUTER JOIN
		--(SELECT Object.Pat_ID1, min(Object.Encounter_DtTm) as Encounter_DtTm 
		--	FROM dbo.Object
		--		INNER JOIN Staff ON Object.Review_ID = Staff.Staff_ID
		--	WHERE Object.Status_Enum IN (5,7,9)
		--		AND Object.Version = 0
		--		AND Object.DocType IN (Select Prompt.Enum FROM dbo.Prompt WHERE Prompt.Text like 'pall%')  --IN ('Referral Letter', 'Internal Referrals'))
		--		AND Staff.Type = 'Pall Care'
		--	group by Object.Pat_ID1
		--) AS PalativeDate ON Medical1.Pat_ID1 = PalativeDate.Pat_ID1 
		(select pat_id1, max(App_DtTm) as Encounter_DtTm from schedule with (nolock) where Activity in (select hsp_code from cpt with (nolock) where Description like '%pal%new%') group by pat_id1)  AS PalativeDate ON Medical1.Pat_ID1 = PalativeDate.Pat_ID1 
		LEFT OUTER JOIN
		--(SELECT Schedule.Pat_ID1, min(Schedule.App_DtTm)  AS Act_DtTm1 
		--	FROM Schedule
		--		INNER JOIN Schedule_ScheduleStatus_MTM ON Schedule.Sch_ID = Schedule_ScheduleStatus_MTM.Sch_ID
		--		INNER JOIN ScheduleStatus ON Schedule_ScheduleStatus_MTM.ScheduleStatusID = ScheduleStatus.ScheduleStatusID
		--	WHERE Schedule.Activity IN ('MDT001', '00825.00', '00825.01')
		--		AND ScheduleStatus.StatusAbbreviation = 'C'
		--	group by Schedule.Pat_ID1
		(select Pat_ID1, max(Edit_DtTm)  AS Act_DtTm1 
			from Chklist  with (nolock)
			where tsk_id in (select tsk_id from QCLTask with (nolock) where Description like '%MDT -%' )
			group by Pat_ID1
		) AS MDT1 ON Medical1.Pat_ID1 = MDT1.Pat_ID1
	LEFT OUTER JOIN  
	(SELECT Schedule.Pat_ID1, max(Schedule.App_DtTm)  AS Act_DtTm1 
			FROM Schedule with (nolock)
			WHERE Schedule.Activity IN (select hsp_code from cpt with (nolock) where CGroup in ('mo' ,'haem' ))
				--and App_DtTm >= (select isnull(dateadd(d,0,min(Dx_DtTm)),'1900-01-01') from Medical where Diagnosis_Class = 1  and pat_id1=Schedule.Pat_ID1)  -- and Dx_DtTm is not null
			group by Schedule.Pat_ID1
		) AS Consultation ON Medical1.Pat_ID1 = Consultation.Pat_ID1
	) AS MedicalRecords
	ON MedicalRecords.PAT_ID1 = TreatmentEvents.Pat_ID1 AND MedicalRecords.MED_ID = TreatmentEvents.MED_ID

	left join @cancerdiagnosis cancerdiagnosis on cancerdiagnosis.name = MedicalRecords.Diag_Confirm1
	LEFT JOIN @laterality laterality on laterality.name = MedicalRecords.Paired_Organ 
/* ------------------------------ Doctor's information Query ----------------------------------- */
	LEFT OUTER JOIN
	( SELECT Staff.Staff_ID,
			ltrim(rtrim(Staff.First_Name) +' '+replace(ltrim(substring(Staff.Last_Name, 1,charindex(' ',Staff.Last_Name)-1)),',','')) as OncName,
			--(RTRIM(Staff.First_Name) + ' ' + RTRIM(Staff.Last_Name)) AS OncName, 
			Ext_ID.ID_Code AS OncAHPRA
		FROM Staff with (nolock)
			LEFT OUTER JOIN Ext_ID with (nolock) ON Staff.Staff_ID = Ext_ID.Staff_ID
		WHERE Ext_ID.Ext_Type = 'AHPRA'  --'ST LICENSE'
	) AS staff_details ON staff_details.Staff_ID = TreatmentEvents.MD_ID			
	LEFT OUTER JOIN
	( SELECT CASE WHEN id_table.External_ID IS NULL 
				THEN ltrim(RTRIM(staff_details_table.Suffix) + ' ' +RTRIM(staff_details_table.First_Name) + ' ' + RTRIM(staff_details_table.Last_Name))
				ELSE ltrim(RTRIM(external_details_table.Suffix) + ' ' +RTRIM(external_details_table.First_Name) + ' ' + RTRIM(external_details_table.Last_Name))
			END AS GPName,
			CASE WHEN id_table.External_ID IS NULL 
				THEN (RTRIM(staff_details_table.Adr1) + ', '  + RTRIM(staff_details_table.Adr2) + ', '  + RTRIM(staff_details_table.City) + ', '  + RTRIM(staff_details_table.State_Province) + ' '  + RTRIM(staff_details_table.Postal))
				ELSE (RTRIM(external_details_table.Adr1) + ', '  + RTRIM(external_details_table.Adr2) + ', '  + RTRIM(external_details_table.City) + ', '  + RTRIM(external_details_table.State_Province) + ' '  + RTRIM(external_details_table.Postal))
			END AS GPAddr,
			referrer_table.Pat_ID1, 
			ahpra_table.ID_Code AS GPAHPRA
		FROM Admin AS referrer_table with (nolock)
			LEFT OUTER JOIN PNP  AS id_table with (nolock) ON id_table.PNP_ID = referrer_table.Ref_Md2_ID
			LEFT OUTER JOIN Staff AS staff_details_table with (nolock) ON staff_details_table.Staff_ID = id_table.Staff_ID
			LEFT OUTER JOIN [External]  AS external_details_table with (nolock) ON external_details_table.External_ID = id_table.External_ID
			LEFT OUTER JOIN Ext_ID AS ahpra_table with (nolock) ON staff_details_table.Staff_ID = ahpra_table.Staff_ID OR external_details_table.External_ID = ahpra_table.External_ID and ahpra_table.Ext_Type = 'AHPRA'  --'ST LICENSE'
	) AS external_staff ON external_staff.Pat_ID1 = TreatmentEvents.PAT_ID1
	/* ---------------------------------- IDENT query ------------------------------------------------*/
	LEFT OUTER JOIN
	(SELECT ident_version.Pat_ID1, Ident.IDA, Ident.IDB, Ident.IDC, Ident.IDD, Ident.IDE, Ident.IDF
		FROM Ident with (nolock),
			( select Pat_id1, max(version) AS row_version from Ident with (nolock) group by Pat_Id1 ) AS ident_version
		where Ident.Pat_Id1 = ident_version.Pat_Id1 and Ident.Version = ident_version.row_version
	) AS ident_partial
	ON ident_partial.Pat_ID1 = TreatmentEvents.Pat_ID1
	/* --------------------------------------------------------------------------------------------- */
) -- AS main_query

	left outer join	(
/* --------------------------------- Staging Details Query    ------------------------------ */
		select  
			TNMStage.Med_ID AS stage_Med_ID1, 
			TNMStage.StageType AS StageType1, 
			TNMStage.T_Stage AS T_Stage1, 
			TNMStage.N_Stage AS N_Stage1, 
			TNMStage.M_Stage AS M_Stage1, 
			TNMStage.Stage AS combined_stage, 
			TNMStage.Edition AS Edition1,  
			cast(TNMStage.Edit_DtTm as date) as Edit_DtTm,
			Medical.PAT_ID1 AS staging_pat_id, 
			CASE Medical.Diagnosis_Class WHEN 5 THEN 2 WHEN 4 THEN 2 ELSE 1 END AS Diagnosis_Class1, -- TODO need more sophisticated rules here
		--	Medical.Dx_DtTm  AS Dx_DtTm1
			Medical.Dx_partial_DtTm  AS Dx_DtTm1,
			TNMStage.Date_Staged_DtTm
		from TNMStage  with (nolock)
			join (select med_id, MIN(tnm_id) as tnm_id from TNMStage with (nolock) group by med_id) b on TNMStage.med_id = b.med_id and TNMStage.tnm_id = b.tnm_id
			join Medical with (nolock) on TNMStage.Med_ID = Medical.Med_ID
			--join @tnmstage ts on ts.name = TNMStage.Stage
		where StageType in (0,1) 
		    --and (Medical.Dx_DtTm  between @startdate AND dateadd(d,1,@enddate))
			--	or TNMStage.Edit_DtTm between @startdate AND dateadd(d,1,@enddate))
	) as Staging on staging.staging_pat_id = Demographics.Pat_ID1 AND staging.stage_Med_ID1 = TreatmentEvents.Med_ID
	left join @stagegroup stagegroup on stagegroup.code = Staging.combined_stage

	
	left outer join	(
/* --------------------------------- Drug Details Query    ------------------------------ */
		SELECT DISTINCT 
			stage1.Pat_ID1 AS regimen_pat_id,
			--stage1.This_Instance AS regimen_cycle_number,
			stage1.This_Instance AS regimen_cycle_number, 
			stage1.PCP_ID AS care_plan_id,
			stage5.drug_label AS drug_name, 
			--stage4.Adm_Code AS drug_name,
			--cast(stage4.Adm_Amount as varchar(10))+' '+isnull(obs.Label,'') AS dose1, 
			cast(cast(stage4.Adm_Amount as decimal(15,2)) as varchar(20))+' '+isnull(obs.Label,'') AS dose1,  
			stage4.Admin_Route AS route,
			--END AS route, */
			stage4.Adm_DtTm AS start_date1, 
			stage4.Adm_End_DtTm AS end_date1, 
			stage8.Cycle_Length AS frequency1, 
			1 AS frequency_unit, 
			(stage7.Day_Offset + 1 ) AS day_of_week 
		FROM PatCPlan  AS stage1 with (nolock)
			INNER JOIN PatCItem AS stage2 with (nolock) ON stage1.PCP_ID = stage2.PCP_ID
			INNER JOIN Orders  AS stage3 with (nolock) ON stage2.PCI_ID = stage3.PCI_ID and stage3.Order_Type in (2, 4, 5, 6) 
			INNER JOIN PharmAdm  AS stage4 with (nolock) ON stage3.ORC_ID = stage4.ORC_Set_ID
			left join ObsDef obs with (nolock) on obs.OBD_ID = stage4.Adm_Units
			INNER JOIN Drug AS stage5 with (nolock) ON stage4.Adm_Code = stage5.DRG_ID
			left JOIN CPItem AS stage7 with (nolock) ON stage2.CPI_ID = stage7.CPI_ID
			left JOIN CPlan AS stage8 with (nolock) ON stage1.CPL_ID = stage8.CPL_ID
		WHERE stage4.Adm_Amount >= 0
			AND (stage2.CPI_ID is NULL OR CONVERT(date, (stage4.Adm_DtTm + (stage8.Cycle_Length - isnull(stage7.Day_Offset,0))-1)) BETWEEN @startdate AND dateadd(d,1,@enddate))
			--AND (stage2.CPI_ID is NULL OR CONVERT(date, (stage4.Adm_DtTm)) BETWEEN @startdate AND dateadd(d,1,@enddate))
	)  as drugs on drugs.regimen_pat_id = Demographics.Pat_ID1  AND TreatmentEvents.PCP_ID = drugs.care_plan_id 
					 							
	left join @drugadminroute drugadminroute on  drugadminroute.name = drugs.route

	left join (SELECT stage1.Pat_ID1 AS regimen_pat_id, 
			stage1.PCP_GROUP_ID AS group_id,
			stage1.This_Instance AS last_cycle_number,  
			stage4.Adm_End_DtTm AS last_admin_date,
			stage8.Cycle_Length,
			case when cast(stage4.Adm_End_DtTm as date) < dateadd(d, stage8.Cycle_Length*-2,@enddate) then 1 else 0 end as isvalid,
			row_number() over (partition by stage1.Pat_ID1, stage1.PCP_GROUP_ID  order by stage4.Adm_End_DtTm desc) as roww
		FROM PatCPlan  AS stage1 with (nolock) 
			JOIN PatCItem AS stage2 with (nolock) ON stage1.PCP_ID = stage2.PCP_ID
			JOIN Orders  AS stage3 with (nolock) ON stage2.PCI_ID = stage3.PCI_ID and stage3.Order_Type in (2, 4, 5, 6) 
			JOIN PharmAdm  AS stage4 with (nolock) ON stage3.ORC_ID = stage4.ORC_Set_ID
			JOIN CPItem AS stage7 with (nolock) ON stage2.CPI_ID = stage7.CPI_ID
			JOIN CPlan AS stage8 with (nolock) ON stage1.CPL_ID = stage8.CPL_ID
			--join drug d with (nolock) on d.DRG_ID = stage4.Adm_Code 
		WHERE stage4.Adm_Amount >= 0 
			and stage4.Status_Enum in (0,1,2,3,5)		-- unknown,void, close, complete, approve  
			and stage1.status_enum in (0,1,2,3,5,23)	-- unknown,void, close, complete, approve, discontinue
			and stage4.Adm_End_DtTm is not null
			--and d.drug_type in (select obd_id from ObsDef where label like 'antineoplastic%' or label like 'chemo%')    -- around 15% difference if only select chemo types compare to all types
	) as last_admin on last_admin.regimen_pat_id = Demographics.Pat_ID1  AND TreatmentEvents.PCP_GROUP_ID = last_admin.group_id  and last_admin.roww = 1 and last_admin.isvalid = 1

	left join (SELECT stage1.Pat_ID1 AS regimen_pat_id, 
			stage1.PCP_GROUP_ID AS group_id,
			stage1.This_Instance AS first_cycle_number,  
			stage4.Adm_End_DtTm AS first_admin_date,
			row_number() over (partition by stage1.Pat_ID1, stage1.PCP_GROUP_ID  order by stage4.Adm_End_DtTm asc) as roww
		FROM PatCPlan  AS stage1 with (nolock) 
			JOIN PatCItem AS stage2 with (nolock) ON stage1.PCP_ID = stage2.PCP_ID
			JOIN Orders  AS stage3 with (nolock) ON stage2.PCI_ID = stage3.PCI_ID and stage3.Order_Type in (2, 4, 5, 6)  -- pharmcy orders only
			JOIN PharmAdm  AS stage4 with (nolock) ON stage3.ORC_ID = stage4.ORC_Set_ID
			--join drug d with (nolock) on d.DRG_ID = stage4.Adm_Code 
		WHERE stage4.Adm_Amount >= 0 
			and stage4.Status_Enum in (0,1,2,3,5)		-- unknown,void, close, complete, approve  
			and stage1.status_enum in (0,1,2,3,5,23)	-- unknown,void, close, complete, approve, discontinue
			and stage4.Adm_End_DtTm is not null
			--and d.drug_type in (select obd_id from ObsDef where label like 'antineoplastic%' or label like 'chemo%')	-- around 15% difference if only select chemo types compare to all types
	) as first_admin on first_admin.regimen_pat_id = Demographics.Pat_ID1  AND TreatmentEvents.PCP_GROUP_ID = first_admin.group_id  and first_admin.roww = 1
)
-- exclude Regimen details where it is a valid EviQ protocol
--WHERE ( TreatmentEvents.Regimen = '1570' or drugs.regimen_cycle_number is NULL or not TreatmentEvents.Regimen LIKE '[0-9][0-9]%' ) -- quick hack, need deeper access to the database to support regular expressions


--select * from #omis


-- future end dates
update #omis
set EpisodeEndDate = null, AntiNeoplasticCycles = null
where EpisodeEndDate > getdate()  or EpisodeEndDate = '' or EpisodeEndDate is null

-- upgrade cancer site version to +1 when site code is C50x
update #omis
set CancerSiteCodeIDVersion =  'ICD10V3'
where CancerSiteCodeID = 'C50'
	and  CancerSiteCodeIDVersion =  'ICD10V2'
	
update #omis
set CancerSiteCodeID  =  substring(CancerSiteCodeID,1,charindex(' ', CancerSiteCodeID,3)-1)
where  CancerSiteCodeIDVersion =  'ICDO3'
	and CancerSiteCodeID like '% %'
	
update #omis
set CancerSiteCodeID  =  cast(replace(CancerSiteCodeID,'.','') as varchar(4))
where  CancerSiteCodeIDVersion =  'ICDO3'
	 
update #omis
set CancerSiteCodeID  =  substring(CancerSiteCodeID,1,charindex(' ', CancerSiteCodeID,3)-1)
where  CancerSiteCodeIDVersion <>  'ICDO3'
	and CancerSiteCodeID like '% %'
	
update #omis
set CancerSiteCodeID  =  cast(replace(CancerSiteCodeID,'.','') as varchar(7))
where  CancerSiteCodeIDVersion =  'ICDO3'
	 

update #omis
set InitialTreatmentFlag = 2

update a
set InitialTreatmentFlag = 1
from #omis a
	join (select  Pat_ID1,PCP_Group_ID, eff_dttm from patcplan with (nolock) where This_Instance = 1  and CPL_ID is not null and course = 1) b
	on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.PCP_Group_ID and b.eff_dttm >=  a.DateOfDiagnosis and b.eff_dttm <= dateadd(m, 4, a.DateOfDiagnosis)

update a
set  InitialTreatmentFlag = 1
from #omis a
join (select a.pat_id1,  a.PCP_Group_ID
	from patcplan a with (nolock)
	join (select pat_id1, min(eff_dttm) as eff_dttm from patcplan with (nolock) where This_Instance = 1 and eff_dttm is not null and CPL_ID is not null group by pat_id1) b
		on a.Pat_ID1  = b.Pat_ID1 and a.Eff_DtTm = b.eff_dttm ) b on a.Pat_ID1  = b.Pat_ID1 and a.GroupID = b.PCP_Group_ID 
where a.DateOfDiagnosis is null


if object_id('tempdb..#consultation') is not null
 drop table #consultation
if object_id('tempdb..#diagnosedate') is not null
 drop table #diagnosedate
if object_id('tempdb..#episodedates') is not null
 drop table #episodedates
if object_id('tempdb..#episodedates2') is not null
 drop table #episodedates2
 
-- diagnose date
select a.PAT_ID1, a.MED_ID, a.Dx_DtTm
into #diagnosedate
from (select m.PAT_ID1, m.MED_ID, case when m.Diagnosis_Class in (5,2) THEN p.Dx_partial_DtTm  ELSE m.Dx_partial_DtTm  END AS Dx_DtTm
	from  Medical m with (nolock)
		join Medical p with (nolock) ON p.MED_ID = m.Related_MED_ID and p.Related_MED_ID  is null and p.Diagnosis_Class = 1) a
	join patient pt on pt.Pat_ID1 = a.PAT_ID1 and a.Dx_DtTm >= pt.Birth_DtTm

	

update #omis 
set ConsultationDate = null
--where  ConsultationDate  <  coalesce(ReferralDate, DateOfDiagnosis,DateOfBirth) or ConsultationDate > NotificationEpisodeChemoStartDate

update a
set a.ConsultationDate = b.Act_DtTm1
from #omis a 
	join 
	(SELECT s.Pat_ID1, e.groupID,  MAX(s.App_DtTm)  AS Act_DtTm1 
					 FROM Schedule  s with (nolock)
						JOIN (select pat_id1, groupID, min(EpisodeStartDate) as EpisodeStartDate,  isnull(min(NotificationEpisodeChemoStartDate),getdate()) as NotificationEpisodeChemoStartDate from #omis group by pat_id1, groupid) e on e.Pat_ID1 = s.Pat_ID1 and cast(s.App_DtTm as date) BETWEEN dateadd(yy,-1,e.EpisodeStartDate) and e.EpisodeStartDate
						JOIN dbo.Schedule_ScheduleStatus_MTM ssm with (nolock) on s.Sch_ID = ssm.Sch_ID 
						JOIN dbo.ScheduleStatus ss with (nolock) on ssm.ScheduleStatusID = ss.ScheduleStatusID and ss.SystemDefined = 1  and ss.ScheduleStatusID = 9 -- = charge
					WHERE s.Suppressed =0 
						AND s.version = 0
						AND s.Activity IN (select hsp_code from cpt with (nolock) where CGroup in ('mo' ,'haem'))
						--and App_DtTm >= (select isnull(dateadd(d,0,min(Dx_DtTm)),'1900-01-01') from Medical where Diagnosis_Class = 1  and pat_id1=Schedule.Pat_ID1)  -- and Dx_DtTm is not null
					GROUP BY s.Pat_ID1, e.groupID)b
	  on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.GroupID 
--where a.EpisodeStartDate < a.ConsultationDate 


update a
set a.ConsultationDate = b.EffDtTm
from #omis a 
	join 
	(SELECT  p.Pat_ID1, e.groupid, MAX(p.Eff_DtTm)  EffDtTm 
					 FROM PatAuth  p with (nolock)
						JOIN (select pat_id1, groupID, min(EpisodeStartDate) as EpisodeStartDate,  isnull(min(NotificationEpisodeChemoStartDate),getdate()) as NotificationEpisodeChemoStartDate from #omis group by pat_id1, groupid) e on e.Pat_ID1 = p.Pat_ID1 and cast(p.Eff_DtTm as date) >= dateadd(yy,-1,e.EpisodeStartDate) and cast(p.Eff_DtTm as date) <= e.EpisodeStartDate
						GROUP BY p.Pat_ID1, e.groupid
					    )b
	  on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.GroupID 
	  WHERE a.ConsultationDate IS NULL


---Initial Consult Date

update a
set a.InitConsultDate = b.Act_DtTm1
from #omis a 
	join 
	(SELECT s.Pat_ID1, e.groupID,  MAX(s.App_DtTm)  AS Act_DtTm1 
					 FROM Schedule  s with (nolock)
						JOIN (select pat_id1, groupID, min(EpisodeStartDate) as EpisodeStartDate,  isnull(min(NotificationEpisodeChemoStartDate),getdate()) as NotificationEpisodeChemoStartDate from #omis group by pat_id1, groupid) e on e.Pat_ID1 = s.Pat_ID1 and cast(s.App_DtTm as date) BETWEEN dateadd(yy,-1,e.EpisodeStartDate) and e.EpisodeStartDate
						JOIN dbo.Schedule_ScheduleStatus_MTM ssm with (nolock) on s.Sch_ID = ssm.Sch_ID 
						JOIN dbo.ScheduleStatus ss with (nolock) on ssm.ScheduleStatusID = ss.ScheduleStatusID and ss.SystemDefined = 1  and ss.ScheduleStatusID = 9 -- = charge
					WHERE s.Suppressed =0 
						AND s.version = 0
						AND s.Activity IN (select hsp_code from cpt with (nolock) where (hsp_code IN ('110','132' ,'Cons') OR hsp_code LIKE '%new%'))
					GROUP BY s.Pat_ID1, e.groupID)b
	  on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.GroupID 




update #omis
set ReferralDate = null
--where ReferralDate < coalesce(DateOfDiagnosis,DateOfBirth) 

-- referral date >= diagnose date and <= consult date
update a
set a.ReferralDate = b.Eff_DtTm1
from #omis a 
      JOIN   
				(   SELECT o.Pat_ID1, c.GroupID, MAX(o.Encounter_DtTm) as Eff_DtTm1  
					FROM Object o with (nolock)
					JOIN (select pat_id1, groupid,   MIN(EpisodeStartDate) as EpisodeStartDate, MIN(ConsultationDate) as ConsultationDate  from #omis group by pat_id1, groupid) c on o.Pat_ID1 = c.Pat_ID1 and cast(o.Encounter_DtTm as date) <= c.ConsultationDate and cast(o.Encounter_DtTm as date) >= dateadd(yy,-1, c.EpisodeStartDate)
					WHERE o.Status_Enum IN (3,5,7,8,9,13) 
					AND o.Version = 0 
					--and o.doctype = 18  -- internal referrals
					AND o.DocType IN (Select Prompt.Enum FROM Prompt with (nolock) WHERE Prompt.Text like 'Referral%')  
					GROUP BY o.Pat_ID1, c.GroupID
		    )b on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.GroupID


			update a
			set a.ReferralDate = b.ReqDtTm
			from #omis a 
			JOIN   (   SELECT  p.Pat_ID1, c.groupid, MAX(p.Req_DtTm)  ReqDtTm 
					FROM PatAuth  p with (nolock)
					JOIN (select pat_id1, groupid,   MIN(EpisodeStartDate) as EpisodeStartDate, MIN(ConsultationDate) as ConsultationDate  from #omis group by pat_id1, groupid)  c on p.Pat_ID1 = c.Pat_ID1 and cast(p.Req_DtTm as date) <= c.ConsultationDate and cast(p.Req_DtTm as date) >= dateadd(yy,-1, c.EpisodeStartDate)
					GROUP BY p.Pat_ID1, c.groupid
			
		    )b on a.Pat_ID1 = b.Pat_ID1 and a.GroupID = b.GroupID
			WHERE a.ReferralDate IS NULL
		
update #omis 
set ClinicalTrialDate = null
where  ClinicalTrialDate  < coalesce(DateOfDiagnosis,DateOfBirth)  


-- ClinicalTrialDate > diagnose date
update a 
set a.ClinicalTrialDate = b.Sts_Start_DtTm, a.ClinicalTrialName = case when b.Trial_Short_Desc = '' then  b.trial_id else b.Trial_Short_Desc end
from #omis a
	join (SELECT p.Pat_ID1, d.groupid, Trial1.Trial_Short_Desc, Trial1.TRL_ID, Trial1.trial_id, p.Sts_Start_DtTm, ROW_NUMBER() over (partition by p.Pat_ID1, d.groupid order by p.DtTm_Reg asc) as rownum
		FROM  PatTrial p with (nolock)
			join Trial  AS Trial1 with (nolock) on p.TRL_ID = Trial1.TRL_ID 
		--	join (select pat_id1, min(dx_dttm) as dx_dttm from #diagnosedate group by pat_id1) d on d.PAT_ID1 = p.Pat_ID1 and p.DtTm_Reg >= d.dx_dttm
			join (select pat_id1, groupid, max(coalesce(ReferralDate, DateOfDiagnosis,ConsultationDate)) as dx_dttm from #omis group by pat_id1, groupid) d on d.PAT_ID1 = p.Pat_ID1 and cast(p.DtTm_Reg as date)>= d.dx_dttm
		where  p.Version = 0 
		--group by p.Pat_ID1, d.groupid, Trial1.Trial_Short_Desc, Trial1.TRL_ID
		) b on a.Pat_ID1 = b.Pat_ID1 and b.GroupID = a.GroupID and b.rownum = 1


update #omis
set PerformanceStatusDate = null, PerformanceStatus = null
--where PerformanceStatusDate < dateadd(yy, -1, EpisodeStartDate)

update l
set l.PerformanceStatusDate = b.Obs_DtTm
	,l.PerformanceStatus = b.ChoiceValue
from #omis l
	join ( SELECT observation_request.OBR_ID
				, observation_request.Pat_ID1
				,l.groupid
				, observation_definition.OBD_ID
				, observation_request.Obs_DtTm
				, observation_definition.Label
				, observation_definition2nd.Label AS ChoiceValue
				--, MAX(observation_definition2nd.ChoiceLabel) OVER (PARTITION BY observation_request.Pat_ID1,observation_definition.Label) AS RowNum
				, ROW_NUMBER() OVER (PARTITION BY observation_request.Pat_ID1,l.groupid ORDER BY observation_request.Obs_DtTm DESC) AS RowNum
			FROM  Observe AS Observe1 with (nolock)
				INNER JOIN ObsDef AS observation_definition with (nolock) ON Observe1.OBD_ID = observation_definition.OBD_ID and observation_definition.Label in ('ECOG Status','ECOG Performance Status', 'Performance Status')
				INNER JOIN ObsDef AS observation_definition2nd with (nolock) ON Observe1.Obs_Choice = observation_definition2nd.OBD_ID
				INNER JOIN ObsReq AS observation_request with (nolock) ON observation_request.Pat_ID1 = Observe1.Pat_ID1 AND observation_request.OBR_ID = Observe1.OBR_SET_ID and observation_request.Version = 0 AND observation_request.Status_Enum NOT IN (1)
				join (select pat_id1, groupid, min(EpisodeStartDate) as EpisodeStartDate, case when min(isnull(DateOfDiagnosis,'1900-01-01')) > min(dateadd(dd, -28, EpisodeStartDate)) then min(DateOfDiagnosis) else dateadd(dd, -28, min(EpisodeStartDate)) end as minstartdate from #omis group by pat_id1, groupid) l on l.Pat_ID1 = observation_request.Pat_ID1 and cast(observation_request.Obs_DtTm as date) between l.minstartdate and l.EpisodeStartDate
		) b on l.Pat_ID1 = b.Pat_ID1 and b.GroupID = l.GroupID and b.RowNum = 1


		

update #omis 
set MDTDate = null
--where  MDTDate  < coalesce(DateOfDiagnosis,DateOfBirth)  



-- MDTDate
update a 
set a.MDTDate = b.Act_DtTm1
from #omis a
	join 
	 (select s.Pat_ID1, d.groupid, max(s.Due_DtTm)  AS Act_DtTm1 
			from Chklist  s with (nolock)
		--		join (select pat_id1, min(dx_dttm) as dx_dttm from #diagnosedate group by pat_id1) d on d.PAT_ID1 = s.Pat_ID1 and s.App_DtTm >= d.dx_dttm
				join (select pat_id1, groupid, CAST(min(isnull(DateOfDiagnosis,'1900-01-01')) as DATE)  as dx_dttm, isnull(min(EpisodeStartDate),getdate()) as EpisodeStartDate from #omis group by pat_id1, groupid) d on d.PAT_ID1 = s.Pat_ID1  and ( cast(s.Due_DtTm as date) BETWEEN CAST(dateadd(YY,-1,EpisodeStartDate) as date) AND CAST( EpisodeStartDate as date )) and cast(s.Due_DtTm as date)>= d.dx_dttm
		where s.tsk_id in (select tsk_id from QCLTask where Description like '%MDT -%' )
		group by s.Pat_ID1, d.groupid
	      ) b on   a.Pat_ID1 = b.Pat_ID1 AND a.groupID = b.groupid

 
-- MDTDate
update a 
set a.MDTDate = b.Encounter_DtTm
from #omis a
	join 	
		(SELECT Object.Pat_ID1, d.groupid ,max(Object.Encounter_DtTm) as Encounter_DtTm 
			FROM Object with (nolock)
			join (select pat_id1, groupid, case when min(isnull(DateOfDiagnosis,'1900-01-01')) = '9999-01-01' then  '1900-01-01' ELSE min(DateOfDiagnosis) END as dx_dttm, isnull(min(EpisodeStartDate),getdate()) as EpisodeStartDate from #omis group by pat_id1, groupid) d on d.PAT_ID1 = Object.Pat_ID1 and ( cast(Object.Encounter_DtTm as date)  BETWEEN CAST(dateadd(YY,-1,EpisodeStartDate) as date) AND CAST( EpisodeStartDate as date )) and cast(Object.Encounter_DtTm as date)>=d.dx_dttm
			WHERE Object.Status_Enum IN (3,5,7,8,9,13) 
				AND Object.Version = 0 
				AND Object.DocType IN (Select Prompt.Enum FROM Prompt with (nolock) WHERE Prompt.Text  IN ('MDT','MDT Notes'))
			group by Object.Pat_ID1, d.groupid
      ) b on   a.Pat_ID1 = b.Pat_ID1 AND a.groupID = b.groupid
	  WHERE a.MDTDate IS NULL

/* Commented to Prevent Updates on Episode Start and End Dates
-- episode start/end dates 			 
SELECT distinct PatCPlan.PCP_GROUP_ID
	, PatCPlan.PCP_ID
	, PatCPlan.Pat_ID1
	, PatCPlan.End_DtTm
	, PatCPlan.This_Instance
	, PatCPlan.Discontinue_DtTm
	, pharmacy_administration.Adm_DtTm  as Start_dttm
into #episodedates
FROM  dbo.PatCPlan with (nolock)
	INNER JOIN dbo.CPlan with (nolock) ON PatCPlan.CPL_ID = CPlan.CPL_ID 
	INNER JOIN dbo.Orders AS pharm_orders with (nolock) ON PatCPlan.Pat_ID1 = pharm_orders.Pat_ID1 and  pharm_orders.Cycle_Number IS NOT NULL
		AND pharm_orders.Cycle_Day IS NOT NULL 
		AND pharm_orders.PCI_ID IS NOT NULL  
		AND pharm_orders.Version = 0 
		AND pharm_orders.Status_Enum NOT IN (1)
	INNER JOIN dbo.PharmAdm AS pharmacy_administration with (nolock) ON PatCPlan.Pat_ID1 = pharmacy_administration.Pat_ID1 AND pharm_orders.ORC_SET_ID = pharmacy_administration.ORC_SET_ID
		and  pharmacy_administration.Version = 0 
		AND pharmacy_administration.Adm_DtTm IS NOT NULL 
		AND pharmacy_administration.Status_Enum NOT IN (1)
where pharmacy_administration.Adm_DtTm + CPlan.Cycle_Length between @startdate and dateadd(d,1,@enddate) or
	 pharmacy_administration.Adm_DtTm between @startdate and dateadd(d,1,@enddate)
	 
select e.PCP_GROUP_ID, e.Pat_ID1, min(coalesce(e.Discontinue_DtTm, e.End_DtTm)) as End_DtTm, min(e.Start_dttm) as Start_dttm
into #episodedates2
from #episodedates e
	join #omis o on o.GroupID = e.PCP_Group_ID and o.Pat_ID1 = e.Pat_ID1 
		and e.Start_dttm >= coalesce(o.ConsultationDate, o.dateofdiagnosis) and coalesce(e.Discontinue_DtTm, e.End_DtTm) <= e.Start_dttm
where e.Start_dttm between @startdate and @enddate
group by e.PCP_GROUP_ID, e.Pat_ID1 
 
delete #episodedates2
where End_DtTm < Start_dttm

update a
set a.EpisodeStartDate = e.Start_dttm, a.EpisodeEndDate = e.End_DtTm
from #omis a
	join #episodedates2 e on a.GroupID = e.PCP_Group_ID and a.Pat_ID1 = e.Pat_ID1
where a.EpisodeStartDate <= coalesce(a.ConsultationDate, ReferralDate, dateofdiagnosis)

update a
set a.EpisodeStartDate = e.Start_dttm, a.EpisodeEndDate = e.End_DtTm
from #omis a
	join #episodedates2 e on a.GroupID = e.PCP_Group_ID and a.Pat_ID1 = e.Pat_ID1
where a.EpisodeStartDate < a.EpisodeEndDate

 */

update #omis 
set TStageID = ''
where TStageID in ('SCAP', 'BRAIN','ELD','eld b','ELD P','id','IIB','M2','Med','metas','Mid','ox','Plt?','Plt<','su',
	'OUR B','pN0(mol-)','pN0(mol+)','pN1mi','WHOLE','88','-','3 FI','Chronic','e','e3 fi','Plt>','SD',
	'e4 fi','EI','ep','ePOP','ePOST','Int','LAden-','LAden?','LAden+','N,TUM','NB','NEI','31','2-Mar','unk',
	'b2','Blast','BRAI','ELVIS','Ext','hylac','iativ','Int','LCyt-','LCyt?','LCyt+','Ltd','nitiv','o','ULA','NA','N/A','x','NOS')
	
update #omis 
set NStageID = ''
where NStageID in ('SCAP', 'BRAIN','ELD','eld b','ELD P','id','IIB','M2','Med','metas','Mid','ox','Plt?','Plt<','su',
	'OUR B','pN0(mol-)','pN0(mol+)','pN1mi','WHOLE','88','-','3 FI','Chronic','e','e3 fi','Plt>','SD',
	'e4 fi','EI','ep','ePOP','ePOST','Int','LAden-','LAden?','LAden+','N,TUM','NB','NEI','31','2-Mar','unk',
	'b2','Blast','BRAI','ELVIS','Ext','hylac','iativ','Int','LCyt-','LCyt?','LCyt+','Ltd','nitiv','o','ULA','NA','N/A','x','NOS')
	
update #omis 
set MStageID = ''
where MStageID in ('SCAP', 'BRAIN','ELD','eld b','ELD P','id','IIB','M2','Med','metas','Mid','ox','Plt?','Plt<','su',
	'OUR B','pN0(mol-)','pN0(mol+)','pN1mi','WHOLE','88','-','3 FI','Chronic','e','e3 fi','Plt>','SD',
	'e4 fi','EI','ep','ePOP','ePOST','Int','LAden-','LAden?','LAden+','N,TUM','NB','NEI','31','2-Mar','unk',
	'b2','Blast','BRAI','ELVIS','Ext','hylac','iativ','Int','LCyt-','LCyt?','LCyt+','Ltd','nitiv','o','ULA','NA','N/A','x','NOS')

update #omis 
set TStageID = substring(TStageID,1,charindex('T',TStageID,1)-1)+substring(TStageID,charindex('T',TStageID,1)+1,10) 
where TStageID like '%T%'
 
update #omis 
set NStageID = substring(NStageID,1,charindex('N',NStageID,1)-1)+substring(NStageID,charindex('N',NStageID,1)+1,10) 
where NStageID like '%N%'
 
update #omis 
set MStageID = substring(MStageID,1,charindex('M',MStageID,1)-1)+substring(MStageID,charindex('M',MStageID,1)+1,10) 
where MStageID like '%M%'


update #omis 
set TStageID = replace(TStageID , 'NOS','')
where TStageID like '%NOS%'
 
update #omis 
set NStageID = replace(NStageID , 'NOS','')
where NStageID like '%NOS%'
 
update #omis 
set MStageID = replace(MStageID, 'NOS','')
where MStageID like '%NOS%'

update #omis 
set MStageID = ''
where MStageID in ('SCAP', 'BRAIN','ELD','eld b','ELD P','id','IIB','M2','Med','metas','Mid','ox','Plt?','Plt<','su',
	'OUR B','pN0(mol-)','pN0(mol+)','pN1mi','WHOLE','88','-','3 FI','Chronic','e','e3 fi','Plt>','SD',
	'e4 fi','EI','ep','ePOP','ePOST','Int','LAden-','LAden?','LAden+','N,TUM','NB','NEI','31','2-Mar','unk',
	'b2','Blast','BRAI','ELVIS','Ext','hylac','iativ','Int','LCyt-','LCyt?','LCyt+','Ltd','nitiv','o','ULA','NA','N/A','x','NOS')


-- select ReferralDate, ConsultationDate, EpisodeStartDate, * from #omis where ReferralDate > ConsultationDate

-- select datediff(d, DateOfDiagnosis, MDTDate), DateOfDiagnosis, MDTDate,   * from #omis order by datediff(d, DateOfDiagnosis, MDTDate) desc



	/*
declare @startdate date, @enddate date

set @startdate = '2017-05-01'		-- start of month
set @enddate = '2017-05-31'			-- end of month
 */

 
if object_id('tempdb..#omis_final') is not null
 drop table #omis_final

select distinct	cast(GroupID  as varchar(20)) as GroupID
	,	cast(MedicareNumber as varchar(20)) as MedicareNumber
	,	cast(MRN as varchar(20)) as MRN
	,	cast([UniqueIdentifier] as varchar(20)) as [UniqueIdentifier]
	,	cast(GivenName1 as varchar(50)) as GivenName1
	,	cast(GivenName2 as varchar(50)) as GivenName2
	,	cast(Surname as varchar(50)) as Surname
	,	cast(AliasSurname as varchar(50)) as AliasSurname 
	,	Sex
	,	DateOfBirth
	,	Birth_Place_original
	,	COBCodeSACC
	,	WayfareAddress
	,	Locality
	,	Postcode
	,	WayfareStateID_original
	,	WayfareStateID
	,	IndigenousStatusID_original
	,	IndigenousStatusID
	,	AmoRegReferringNumber
	,	DoctorName
	,	TreatingFacilityCode
	,	FacilityCode
	,	DateOfDiagnosis
	,	CancerSiteCodeID
	,	CancerSiteCodeIDVersion
	,   MorphologyCodeIDVersion
	,	BestBasisOfDiagnosisID_original
	,	BestBasisOfDiagnosisID
	,	Laterality_original
	,	Laterality
	,	HistopathologicalGradeID
	,	MorphologyCodeID
	,	DegreeOfSpreadID
	,	TNMStagingDate
	,	TStageID_original
	,	NStageID_original
	,	MStageID_original
	,	TStageID
	,	NStageID
	,	MStageID
	,	TNMStagingGroupID
	,	TNMStagingBasisID
	,	OtherStagingDate
	,	OtherStagingSchemeID
	,	OtherStagingGroupID
	,	OtherStagingBasisID
	,	EpisodeIntentID_original
	,	EpisodeIntentID
	,	InitialTreatmentFlag
	,	EpisodeStartDate
	,	EpisodeEndDate
	,	AntiNeoplasticCycles
	,	'1570' as ProtocolID
	,	NotificationEpisodeChemoCycle
	,	OMISDrugName
	,	NotificationEpisodeChemoDose
	,	NotificationEpisodeChemoRouteID_original
	,	NotificationEpisodeChemoRouteID
	,	NotificationEpisodeChemoStartDate
	,	NotificationEpisodeChemoEndDate
	,	NotificationEpisodeChemoFrequency
	,	NotificationEpisodeChemoFrequencyUnit
	,	NotificationEpisodeChemoDay
	,	ReferralDate
	,	ConsultationDate
	,	ClinicalTrialDate
	,	ClinicalTrialName
	,	MDTDate
	,	ReferralToPalliativeCareDate
	,	PerformanceStatusDate
	,	PerformanceStatus
	,	CPL_ID
	,	CPlan_Name
	,	Regimen
	,   InitConsultDate
into #omis_final
from #omis
where (ProtocolID = '1570' or COALESCE(LTRIM(RTRIM(ProtocolID)),'X') = 'X' or (isnumeric(ProtocolID)  = 0 and ISNUMERIC(replace(replace(replace(substring(ProtocolID,1,charindex(' ',ProtocolID)),'/',''),'b',''),'a','')) = 0))   
--and TreatingFacilityCode = @hosp_code --removed as now single extract
union all
select distinct	cast(GroupID  as varchar(20))
	,	cast(MedicareNumber as varchar(20))
	,	cast(MRN as varchar(20))
	,	cast([UniqueIdentifier] as varchar(20))
	,	cast(GivenName1 as varchar(50))
	,	cast(GivenName2 as varchar(50))
	,	cast(Surname as varchar(50))
	,	cast(AliasSurname as varchar(50))
	,	Sex
	,	DateOfBirth
	,	Birth_Place_original
	,	COBCodeSACC
	,	WayfareAddress
	,	Locality
	,	Postcode
	,	WayfareStateID_original
	,	WayfareStateID
	,	IndigenousStatusID_original
	,	IndigenousStatusID
	,	AmoRegReferringNumber
	,	DoctorName
	,	TreatingFacilityCode
	,	FacilityCode
	,	DateOfDiagnosis
	,	CancerSiteCodeID
	,	CancerSiteCodeIDVersion
	,   MorphologyCodeIDVersion
	,	BestBasisOfDiagnosisID_original
	,	BestBasisOfDiagnosisID
	,	Laterality_original
	,	Laterality
	,	HistopathologicalGradeID
	,	MorphologyCodeID
	,	DegreeOfSpreadID
	,	TNMStagingDate
	,	TStageID_original
	,	NStageID_original
	,	MStageID_original
	,	TStageID
	,	NStageID
	,	MStageID
	,	TNMStagingGroupID
	,	TNMStagingBasisID
	,	OtherStagingDate
	,	OtherStagingSchemeID
	,	OtherStagingGroupID
	,	OtherStagingBasisID
	,	EpisodeIntentID_original
	,	EpisodeIntentID
	,	InitialTreatmentFlag
	,	EpisodeStartDate
	,	EpisodeEndDate
	,	AntiNeoplasticCycles
	,	ProtocolID
	,	null as NotificationEpisodeChemoCycle
	,	null as OMISDrugName
	,	null as NotificationEpisodeChemoDose
	,	null as NotificationEpisodeChemoRouteID_original
	,	null as NotificationEpisodeChemoRouteID
	,	null as NotificationEpisodeChemoStartDate
	,	null as NotificationEpisodeChemoEndDate
	,	null as NotificationEpisodeChemoFrequency
	,	null as NotificationEpisodeChemoFrequencyUnit
	,	null as NotificationEpisodeChemoDay
	,	ReferralDate
	,	ConsultationDate
	,	ClinicalTrialDate
	,	ClinicalTrialName
	,	MDTDate
	,	ReferralToPalliativeCareDate
	,	PerformanceStatusDate
	,	PerformanceStatus
	,	CPL_ID
	,	CPlan_Name
	,	Regimen
	,   InitConsultDate
from #omis
where ProtocolID <> '1570' and (isnumeric(ProtocolID)  = 1  or ISNUMERIC(replace(replace(replace(substring(ProtocolID,1,charindex(' ',ProtocolID)),'/',''),'b',''),'a','')) = 1)
--and TreatingFacilityCode = @hosp_code -- removed as now single extract

--select * from #omis_final


/****************************************************************************************************************************************************************************************/


/*
declare @startdate date, @enddate date, @debug char(1)
set @startdate = '2015-01-01'		-- start of month
set @enddate = '2015-03-31'			-- end of month
set @debug = 'Y'					-- Y = show real dates, N = DDMMYYYY
 */
 
   
 
 
if object_id('tempdb..#omis_debug') is not null
 drop table #omis_debug
 
if @debug = 'Y' 
begin


select GroupID
	,	case when len(GroupID) > 11 then d_GroupID+' |value > 11 characters' else d_GroupID end as d_GroupID
	,	MedicareNumber
	,	case when len(MedicareNumber) > 12 then d_MedicareNumber+' |value > 12 characters' else d_MedicareNumber end as d_MedicareNumber
	,	MRN
	,	case when len(MRN) > 20 then d_MRN+' |value > 20 characters' else d_MRN end as d_MRN
	,	UniqueIdentifier
	,	case when len(UniqueIdentifier) > 20 then d_UniqueIdentifier+' |value > 20 characters' else d_UniqueIdentifier end as d_UniqueIdentifier
	,	GivenName1
	,	case when len(GivenName1) > 40 then d_GivenName1+' |value > 40 characters' else d_GivenName1 end as d_GivenName1
	,	GivenName2
	,	case when len(GivenName2) > 40 then d_GivenName2+' |value > 40 characters' else d_GivenName2 end as d_GivenName2
	,	Surname
	,	case when len(Surname) > 40 then d_Surname+' |value > 40 characters' else d_Surname end as d_Surname
	,	AliasSurname
	,	case when len(AliasSurname) > 40 then d_AliasSurname+' |value > 40 characters' else d_AliasSurname end as d_AliasSurname
	,	Sex
	,	case when len(Sex) > 1 then d_Sex+' |value > 1 characters' else d_Sex end as d_Sex
	,	DateOfBirth
	,	case when isdate(DateOfBirth) > 0 and DateOfBirth >= dateadd(dd,-1,getdate()) then d_DateOfBirth+' |value > today' else d_DateOfBirth  end as d_DateOfBirth
	,	Birth_Place_original
	,	d_Birth_Place_original
	,	COBCodeSACC
	,	case when len(COBCodeSACC) > 4 then d_COBCodeSACC+' |value > 4 characters' else d_COBCodeSACC end as d_COBCodeSACC
	,	WayfareAddress
	,	case when len(WayfareAddress) > 180 then d_WayfareAddress+' |value > 180 characters' else d_WayfareAddress end as d_WayfareAddress
	,	Locality
	,	case when len(Locality) > 40 then d_Locality+' |value > 40 characters' else d_Locality end as d_Locality
	,	Postcode
	,	case when len(Postcode) > 4 then d_Postcode+' |value > 4 characters' else d_Postcode end as d_Postcode
	,	WayfareStateID_original
	,	d_WayfareStateID_original
	,	WayfareStateID
	,	case when len(WayfareStateID) > 2 then d_WayfareStateID+' |value > 2 characters' else d_WayfareStateID end as d_WayfareStateID
	,	IndigenousStatusID_original
	,	d_IndigenousStatusID_original
	,	IndigenousStatusID
	,	case when len(IndigenousStatusID) > 1 then d_IndigenousStatusID+' |value > 1 characters' else d_IndigenousStatusID end as d_IndigenousStatusID
	,	AmoRegReferringNumber
	,	case when len(AmoRegReferringNumber) > 20 then d_AmoRegReferringNumber+' |value > 20 characters' else d_AmoRegReferringNumber end as d_AmoRegReferringNumber
	,	DoctorName
	,	case when len(DoctorName) > 120 then d_DoctorName+' |value > 120 characters' else d_DoctorName end as d_DoctorName
	,	TreatingFacilityCode
	,	case when len(TreatingFacilityCode) > 4 then d_TreatingFacilityCode+' |value > 4 characters' else d_TreatingFacilityCode end as d_TreatingFacilityCode
	,	FacilityCode
	,	case when len(FacilityCode) > 4 then d_FacilityCode+' |value > 4 characters' else d_FacilityCode end as d_FacilityCode
	,	DateOfDiagnosis
	,	case when isdate(DateOfDiagnosis) > 0 and DateOfDiagnosis >= dateadd(dd,-1,getdate()) then d_DateOfDiagnosis+' |value > today' else d_DateOfDiagnosis  end as d_DateOfDiagnosis
	,	CancerSiteCodeID
	,	case when len(CancerSiteCodeID) > 7 then d_CancerSiteCodeID+' |value > 7 characters' else d_CancerSiteCodeID end as d_CancerSiteCodeID
	,	CancerSiteCodeIDVersion
	,	case when len(CancerSiteCodeIDVersion) > 10 then d_CancerSiteCodeIDVersion+' |value > 10 characters' else d_CancerSiteCodeIDVersion end as d_CancerSiteCodeIDVersion
	,	MorphologyCodeIDVersion
	,	case when len(MorphologyCodeIDVersion) > 10 then d_MorphologyCodeIDVersion+' |value > 10 characters' else d_MorphologyCodeIDVersion end as d_MorphologyCodeIDVersion
	,	BestBasisOfDiagnosisID_original
	,	d_BestBasisOfDiagnosisID_original
	,	BestBasisOfDiagnosisID
	,	case when len(BestBasisOfDiagnosisID) > 1 then d_BestBasisOfDiagnosisID+' |value > 1 characters' else d_BestBasisOfDiagnosisID end as d_BestBasisOfDiagnosisID
	,	Laterality_original
	,	d_Laterality_original
	,	Laterality
	,	case when len(Laterality) > 1 then d_Laterality+' |value > 1 characters' else d_Laterality end as d_Laterality
	,	HistopathologicalGradeID
	,	case when len(HistopathologicalGradeID) > 1 then d_HistopathologicalGradeID+' |value > 1 characters' else d_HistopathologicalGradeID end as d_HistopathologicalGradeID
	,	MorphologyCodeID
	,	case when len(MorphologyCodeID) > 10 then d_MorphologyCodeID+' |value > 10 characters' else d_MorphologyCodeID end as d_MorphologyCodeID
	,	DegreeOfSpreadID
	,	case when len(DegreeOfSpreadID) > 1 then d_DegreeOfSpreadID+' |value > 1 characters' else d_DegreeOfSpreadID end as d_DegreeOfSpreadID
	,	TNMStagingDate
	,	case when isdate(TNMStagingDate) > 0 and TNMStagingDate >= dateadd(dd,-1,getdate()) then d_TNMStagingDate+' |value > today' else d_TNMStagingDate  end as d_TNMStagingDate
	,	TStageID_original
	,	NStageID_original
	,	MStageID_original
	,	TStageID
	,	case when len(TStageID) > 50 then d_TStageID+' |value > 50 characters' else d_TStageID end as d_TStageID
	,	NStageID
	,	case when len(NStageID) > 50 then d_NStageID+' |value > 50 characters' else d_NStageID end as d_NStageID
	,	MStageID
	,	case when len(MStageID) > 50 then d_MStageID+' |value > 50 characters' else d_MStageID end as d_MStageID
	,	TNMStagingGroupID
	,	case when len(TNMStagingGroupID) > 50 then d_TNMStagingGroupID+' |value > 50 characters' else d_TNMStagingGroupID end as d_TNMStagingGroupID
	,	TNMStagingBasisID
	,	case when len(TNMStagingBasisID) > 1 then d_TNMStagingBasisID+' |value > 1 characters' else d_TNMStagingBasisID end as d_TNMStagingBasisID
	,	OtherStagingDate
	,	case when isdate(OtherStagingDate) > 0 and OtherStagingDate >= dateadd(dd,-1,getdate()) then d_OtherStagingDate+' |value > today' else d_OtherStagingDate  end as d_OtherStagingDate
	,	OtherStagingSchemeID
	,	case when len(OtherStagingSchemeID) > 2 then d_OtherStagingSchemeID+' |value > 2 characters' else d_OtherStagingSchemeID end as d_OtherStagingSchemeID
	,	OtherStagingGroupID
	,	case when len(OtherStagingGroupID) > 14 then d_OtherStagingGroupID+' |value > 14 characters' else d_OtherStagingGroupID end as d_OtherStagingGroupID
	,	OtherStagingBasisID
	,	case when len(OtherStagingBasisID) > 1 then d_OtherStagingBasisID+' |value > 1 characters' else d_OtherStagingBasisID end as d_OtherStagingBasisID
	,	EpisodeIntentID_original
	,	d_EpisodeIntentID_original
	,	EpisodeIntentID
	,	case when len(EpisodeIntentID) > 2 then d_EpisodeIntentID+' |value > 2 characters' else d_EpisodeIntentID end as d_EpisodeIntentID
	,	InitialTreatmentFlag
	,	case when len(InitialTreatmentFlag) > 1 then d_InitialTreatmentFlag+' |value > 1 characters' else d_InitialTreatmentFlag end as d_InitialTreatmentFlag
	,	EpisodeStartDate
	,	case when isdate(EpisodeStartDate) > 0 and EpisodeStartDate >= dateadd(dd,-1,getdate()) then d_EpisodeStartDate+' |value > today' else d_EpisodeStartDate  end as d_EpisodeStartDate
	,	EpisodeEndDate
	,	case when isdate(EpisodeEndDate) > 0 and EpisodeEndDate >= dateadd(dd,365,getdate()) then d_EpisodeEndDate+' |value > 1 year' else d_EpisodeEndDate  end as d_EpisodeEndDate
	,	AntiNeoplasticCycles
	,	case when len(AntiNeoplasticCycles) > 3 then d_AntiNeoplasticCycles+' |value > 3 characters' else d_AntiNeoplasticCycles end as d_AntiNeoplasticCycles
	,	ProtocolID
	,	case when len(ProtocolID) > 15 then d_ProtocolID+' |value > 15 characters' else d_ProtocolID end as d_ProtocolID
	,	NotificationEpisodeChemoCycle
	,	case when len(NotificationEpisodeChemoCycle) > 3 then d_NotificationEpisodeChemoCycle+' |value > 3 characters' else d_NotificationEpisodeChemoCycle end as d_NotificationEpisodeChemoCycle
	,	OMISDrugName
	,	case when len(OMISDrugName) > 512 then d_OMISDrugName+' |value > 512 characters' else d_OMISDrugName end as d_OMISDrugName
	,	NotificationEpisodeChemoDose
	,	case when len(NotificationEpisodeChemoDose) > 20 then d_NotificationEpisodeChemoDose+' |value > 20 characters' else d_NotificationEpisodeChemoDose end as d_NotificationEpisodeChemoDose
	,	NotificationEpisodeChemoRouteID_original
	,	d_NotificationEpisodeChemoRouteID_original
	,	NotificationEpisodeChemoRouteID
	,	case when len(NotificationEpisodeChemoRouteID) > 2 then d_NotificationEpisodeChemoRouteID+' |value > 2 characters' else d_NotificationEpisodeChemoRouteID end as d_NotificationEpisodeChemoRouteID
	,	NotificationEpisodeChemoStartDate
	,	case when isdate(NotificationEpisodeChemoStartDate) > 0 and NotificationEpisodeChemoStartDate >= dateadd(dd,-1,getdate()) then d_NotificationEpisodeChemoStartDate+' |value > today' else d_NotificationEpisodeChemoStartDate  end as d_NotificationEpisodeChemoStartDate
	,	NotificationEpisodeChemoEndDate
	,	case when isdate(NotificationEpisodeChemoEndDate) > 0 and NotificationEpisodeChemoEndDate >= dateadd(dd,-1,getdate()) then d_NotificationEpisodeChemoEndDate+' |value > today' else d_NotificationEpisodeChemoEndDate  end as d_NotificationEpisodeChemoEndDate
	,	NotificationEpisodeChemoFrequency
	,	case when len(NotificationEpisodeChemoFrequency) > 2 then d_NotificationEpisodeChemoFrequency+' |value > 2 characters' else d_NotificationEpisodeChemoFrequency end as d_NotificationEpisodeChemoFrequency
	,	NotificationEpisodeChemoFrequencyUnit
	,	case when len(NotificationEpisodeChemoFrequencyUnit) > 1 then d_NotificationEpisodeChemoFrequencyUnit+' |value > 1 characters' else d_NotificationEpisodeChemoFrequencyUnit end as d_NotificationEpisodeChemoFrequencyUnit
	,	NotificationEpisodeChemoDay
	,	case when len(NotificationEpisodeChemoDay) > 15 then d_NotificationEpisodeChemoDay+' |value > 15 characters' else d_NotificationEpisodeChemoDay end as d_NotificationEpisodeChemoDay
	,	ReferralDate
	,	case when isdate(ReferralDate) > 0 and ReferralDate >= dateadd(dd,-1,getdate()) then d_ReferralDate+' |value > today' else d_ReferralDate  end as d_ReferralDate
	,	ConsultationDate
	,	case when isdate(ConsultationDate) > 0 and ConsultationDate >= dateadd(dd,-1,getdate()) then d_ConsultationDate+' |value > today' else d_ConsultationDate  end as d_ConsultationDate
	,	ClinicalTrialDate
	,	case when isdate(ClinicalTrialDate) > 0 and ClinicalTrialDate >= dateadd(dd,-1,getdate()) then d_ClinicalTrialDate+' |value > today' else d_ClinicalTrialDate  end as d_ClinicalTrialDate
	,	ClinicalTrialName
	,	case when len(ClinicalTrialName) > 100 then d_ClinicalTrialName+' |value > 100 characters' else d_ClinicalTrialName end as d_ClinicalTrialName
	,	MDTDate
	,	case when isdate(MDTDate) > 0 and MDTDate >= dateadd(dd,-1,getdate()) then d_MDTDate+' |value > today' else d_MDTDate  end as d_MDTDate
	,	ReferralToPalliativeCareDate
	,	case when isdate(ReferralToPalliativeCareDate) > 0 and ReferralToPalliativeCareDate >= dateadd(dd,-1,getdate()) then d_ReferralToPalliativeCareDate+' |value > today' else d_ReferralToPalliativeCareDate  end as d_ReferralToPalliativeCareDate
	,	PerformanceStatusDate
	,	case when isdate(PerformanceStatusDate) > 0 and PerformanceStatusDate >= dateadd(dd,-1,getdate()) then d_PerformanceStatusDate+' |value > today' else d_PerformanceStatusDate  end as d_PerformanceStatusDate
	,	PerformanceStatus
	,	case when len(PerformanceStatus) > 1 then d_PerformanceStatus+' |value > 1 characters' else d_PerformanceStatus end as d_PerformanceStatus
	,	CPL_ID
	,	CPlan_Name
	,	Regimen
into #omis_debug
from (select	GroupID
		,	case when len(GroupID) > 0 and isnumeric(GroupID)=0 then d_GroupID +' |value not numeric' else d_GroupID end as d_GroupID
		,	MedicareNumber
		,	case when len(MedicareNumber) > 0 and isnumeric(MedicareNumber)< 1 then d_MedicareNumber +' |value not numeric' else d_MedicareNumber end as d_MedicareNumber
		,	MRN
		,	d_MRN
		,	UniqueIdentifier
		,	d_UniqueIdentifier
		,	GivenName1
		,	d_GivenName1
		,	GivenName2
		,	d_GivenName2
		,	Surname
		,	d_Surname
		,	AliasSurname
		,	d_AliasSurname
		,	Sex
		,	case when len(Sex) > 0 and isnumeric(Sex)=0 then d_Sex+' |value not numeric' else d_Sex end as d_Sex
		,	DateOfBirth
		,	case when len(DateOfBirth) > 0 and isdate(DateOfBirth)=0 then d_DateOfBirth+' |value not numeric' else d_DateOfBirth end as d_DateOfBirth
		,	Birth_Place_original
		,	d_Birth_Place_original
		,	COBCodeSACC
		,	case when len(COBCodeSACC) > 0 and isnumeric(COBCodeSACC)=0 then d_COBCodeSACC+' |value not numeric' else d_COBCodeSACC end as d_COBCodeSACC
		,	WayfareAddress
		,	d_WayfareAddress
		,	Locality
		,	d_Locality
		,	Postcode
		,	case when len(Postcode) > 0 and isnumeric(Postcode)=0 then d_Postcode+' |value not numeric' else d_Postcode end as d_Postcode
		,	WayfareStateID_original
		,	d_WayfareStateID_original
		,	WayfareStateID
		,	case when len(WayfareStateID) > 0 and isnumeric(WayfareStateID)=0 then d_WayfareStateID+' |value not numeric' else d_WayfareStateID end as d_WayfareStateID
		,	IndigenousStatusID_original
		,	d_IndigenousStatusID_original
		,	IndigenousStatusID
		,	case when len(IndigenousStatusID) > 0 and isnumeric(IndigenousStatusID)=0 then d_IndigenousStatusID+' |value not numeric' else d_IndigenousStatusID end as d_IndigenousStatusID
		,	AmoRegReferringNumber
		,	d_AmoRegReferringNumber
		,	DoctorName
		,	d_DoctorName
		,	TreatingFacilityCode
		,	d_TreatingFacilityCode
		,	FacilityCode
		,	d_FacilityCode
		,	DateOfDiagnosis
		,	case when len(DateOfDiagnosis) > 0 and isdate(DateOfDiagnosis)=0 then d_DateOfDiagnosis+' |value not a date' else d_DateOfDiagnosis end as d_DateOfDiagnosis
		,	CancerSiteCodeID
		,	d_CancerSiteCodeID
		,	CancerSiteCodeIDVersion
		,	d_CancerSiteCodeIDVersion
		,	MorphologyCodeIDVersion
		,	d_MorphologyCodeIDVersion
		,	BestBasisOfDiagnosisID_original
		,	d_BestBasisOfDiagnosisID_original
		,	BestBasisOfDiagnosisID
		,	case when len(BestBasisOfDiagnosisID) > 0 and isnumeric(BestBasisOfDiagnosisID)=0 then d_BestBasisOfDiagnosisID+' |value not numeric' else d_BestBasisOfDiagnosisID end as d_BestBasisOfDiagnosisID
		,	Laterality_original
		,	d_Laterality_original
		,	Laterality
		,	case when len(Laterality) > 0 and isnumeric(Laterality)=0 then d_Laterality+' |value not numeric' else d_Laterality end as d_Laterality
		,	HistopathologicalGradeID
		,	case when len(HistopathologicalGradeID) > 0 and isnumeric(HistopathologicalGradeID)=0 then d_HistopathologicalGradeID+' |value not numeric' else d_HistopathologicalGradeID end as d_HistopathologicalGradeID
		,	MorphologyCodeID
		,	d_MorphologyCodeID
		,	DegreeOfSpreadID
		,	case when len(DegreeOfSpreadID) > 0 and isnumeric(DegreeOfSpreadID)=0 then d_DegreeOfSpreadID+' |value not numeric' else d_DegreeOfSpreadID end as d_DegreeOfSpreadID
		,	TNMStagingDate
		,	case when len(TNMStagingDate) > 0 and isdate(TNMStagingDate)=0 then d_TNMStagingDate+' |value not a date' else d_TNMStagingDate end as d_TNMStagingDate
		,	TStageID_original
		,	NStageID_original
		,	MStageID_original
		,	TStageID
		,	d_TStageID
		,	NStageID
		,	d_NStageID
		,	MStageID
		,	d_MStageID
		,	TNMStagingGroupID
		,	d_TNMStagingGroupID
		,	TNMStagingBasisID
		,	d_TNMStagingBasisID
		,	OtherStagingDate
		,	d_OtherStagingDate
		,	OtherStagingSchemeID
		,	case when len(OtherStagingSchemeID) > 0 and isnumeric(OtherStagingSchemeID)=0 then d_OtherStagingSchemeID+' |value not numeric' else d_OtherStagingSchemeID end as d_OtherStagingSchemeID
		,	OtherStagingGroupID
		,	d_OtherStagingGroupID
		,	OtherStagingBasisID
		,	d_OtherStagingBasisID
		,	EpisodeIntentID_original
		,	d_EpisodeIntentID_original
		,	EpisodeIntentID
		,	case when len(EpisodeIntentID) > 0 and isnumeric(EpisodeIntentID)=0 then d_EpisodeIntentID+' |value not numeric' else d_EpisodeIntentID end as d_EpisodeIntentID
		,	InitialTreatmentFlag
		,	case when len(InitialTreatmentFlag) > 0 and isnumeric(InitialTreatmentFlag)=0 then d_InitialTreatmentFlag+' |value not numeric' else d_InitialTreatmentFlag end as d_InitialTreatmentFlag
		,	EpisodeStartDate
		,	case when len(EpisodeStartDate) > 0 and isdate(EpisodeStartDate)=0 then d_EpisodeStartDate+' |value not a date' else d_EpisodeStartDate end as d_EpisodeStartDate
		,	EpisodeEndDate
		,	case when len(EpisodeEndDate) > 0 and isdate(EpisodeEndDate)=0 then d_EpisodeEndDate+' |value not a date' else d_EpisodeEndDate end as d_EpisodeEndDate
		,	AntiNeoplasticCycles
		,	case when len(AntiNeoplasticCycles) > 0 and isnumeric(AntiNeoplasticCycles)=0 then d_AntiNeoplasticCycles+' |value not numeric' else d_AntiNeoplasticCycles end as d_AntiNeoplasticCycles
		,	ProtocolID
		,	d_ProtocolID
		,	NotificationEpisodeChemoCycle
		,	case when len(NotificationEpisodeChemoCycle) > 0 and isnumeric(NotificationEpisodeChemoCycle)=0 then d_NotificationEpisodeChemoCycle+' |value not numeric' else d_NotificationEpisodeChemoCycle end as d_NotificationEpisodeChemoCycle
		,	OMISDrugName
		,	d_OMISDrugName
		,	NotificationEpisodeChemoDose
		,	d_NotificationEpisodeChemoDose
		,	NotificationEpisodeChemoRouteID_original
		,	d_NotificationEpisodeChemoRouteID_original
		,	NotificationEpisodeChemoRouteID
		,	case when len(NotificationEpisodeChemoRouteID) > 0 and isnumeric(NotificationEpisodeChemoRouteID)=0 then d_NotificationEpisodeChemoRouteID+' |value not numeric' else d_NotificationEpisodeChemoRouteID end as d_NotificationEpisodeChemoRouteID
		,	NotificationEpisodeChemoStartDate
		,	case when len(NotificationEpisodeChemoStartDate) > 0 and isdate(NotificationEpisodeChemoStartDate)=0 then d_NotificationEpisodeChemoStartDate+' |value not a date' else d_NotificationEpisodeChemoStartDate end as d_NotificationEpisodeChemoStartDate
		,	NotificationEpisodeChemoEndDate
		,	case when len(NotificationEpisodeChemoEndDate) > 0 and isdate(NotificationEpisodeChemoEndDate)=0 then d_NotificationEpisodeChemoEndDate+' |value not a date' else d_NotificationEpisodeChemoEndDate end as d_NotificationEpisodeChemoEndDate
		,	NotificationEpisodeChemoFrequency
		,	case when len(NotificationEpisodeChemoFrequency) > 0 and isnumeric(NotificationEpisodeChemoFrequency)=0 then d_NotificationEpisodeChemoFrequency+' |value not numeric' else d_NotificationEpisodeChemoFrequency end as d_NotificationEpisodeChemoFrequency
		,	NotificationEpisodeChemoFrequencyUnit
		,	case when len(NotificationEpisodeChemoFrequencyUnit) > 0 and isnumeric(NotificationEpisodeChemoFrequencyUnit)=0 then d_NotificationEpisodeChemoFrequencyUnit+' |value not numeric' else d_NotificationEpisodeChemoFrequencyUnit end as d_NotificationEpisodeChemoFrequencyUnit
		,	NotificationEpisodeChemoDay
		,	d_NotificationEpisodeChemoDay
		,	ReferralDate
		,	case when len(ReferralDate) > 0 and isdate(ReferralDate)=0 then d_ReferralDate+' |value not a date' else d_ReferralDate end as d_ReferralDate
		,	ConsultationDate
		,	case when len(ConsultationDate) > 0 and isdate(ConsultationDate)=0 then d_ConsultationDate+' |value not a date' else d_ConsultationDate end as d_ConsultationDate
		,	ClinicalTrialDate
		,	case when len(ClinicalTrialDate) > 0 and isdate(ClinicalTrialDate)=0 then d_ClinicalTrialDate+' |value not a date' else d_ClinicalTrialDate end as d_ClinicalTrialDate
		,	ClinicalTrialName
		,	d_ClinicalTrialName
		,	MDTDate
		,	case when len(MDTDate) > 0 and isdate(MDTDate)=0 then d_MDTDate+' |value not a date' else d_MDTDate end as d_MDTDate
		,	ReferralToPalliativeCareDate
		,	case when len(ReferralToPalliativeCareDate) > 0 and isdate(ReferralToPalliativeCareDate)=0 then d_ReferralToPalliativeCareDate+' |value not a date' else d_ReferralToPalliativeCareDate end as d_ReferralToPalliativeCareDate
		,	PerformanceStatusDate
		,	case when len(PerformanceStatusDate) > 0 and isdate(PerformanceStatusDate)=0 then d_PerformanceStatusDate+' |value not a date' else d_PerformanceStatusDate end as d_PerformanceStatusDate
		,	PerformanceStatus
		,	case when len(PerformanceStatus) > 0 and isnumeric(PerformanceStatus)=0 then d_PerformanceStatus+' |value not numeric' else d_PerformanceStatus end as d_PerformanceStatus
		,	CPL_ID
		,	CPlan_Name
		,	Regimen
	from ( select rtrim(isnull(cast(GroupID  as varchar(50)),'')) as GroupID
				, cast((case when len(rtrim(isnull(GroupID,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_GroupID
				, rtrim(isnull(cast(MedicareNumber  as varchar(50)),'')) as MedicareNumber
				, cast('O' as varchar(250)) as d_MedicareNumber
				, rtrim(isnull(cast(MRN  as varchar(50)),'')) as MRN 
				, cast('O' as varchar(250)) as d_MRN
				, rtrim(isnull(cast([UniqueIdentifier]  as varchar(50)),'')) as [UniqueIdentifier] 
				, cast('O' as varchar(250)) as d_UniqueIdentifier
				, rtrim(isnull(cast(GivenName1  as varchar(50)),'')) as GivenName1 
				, cast((case when len(rtrim(isnull(GivenName1,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_GivenName1
				, rtrim(isnull(cast(GivenName2  as varchar(50)),'')) as GivenName2 
				, cast('O' as varchar(250)) as d_GivenName2
				, rtrim(isnull(cast(Surname  as varchar(50)),'')) as Surname 
				, cast((case when len(rtrim(isnull(Surname,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_Surname
				, rtrim(isnull(cast(AliasSurname  as varchar(50)),'')) as AliasSurname 
				, cast('O' as varchar(250)) as d_AliasSurname
				, rtrim(isnull(cast(Sex as varchar(50)),'')) as Sex
				, cast((case when len(rtrim(isnull(Sex,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_Sex
				, rtrim(isnull(cast(DateOfBirth as varchar(50)),'')) as DateOfBirth
				, cast((case when len(rtrim(isnull(DateOfBirth,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_DateOfBirth
				, rtrim(isnull(cast(Birth_Place_original as varchar(50)),'')) as Birth_Place_original
				, '' as d_Birth_Place_original
				, rtrim(isnull(cast(COBCodeSACC as varchar(50)),'')) as COBCodeSACC
				, cast((case when len(rtrim(isnull(COBCodeSACC,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_COBCodeSACC
				, rtrim(isnull(cast(WayfareAddress as varchar(200)),'')) as WayfareAddress
				, cast((case when len(rtrim(isnull(WayfareAddress,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_WayfareAddress
				, rtrim(isnull(cast(Locality as varchar(50)),'')) as Locality
				, cast((case when len(rtrim(isnull(Locality,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_Locality
				, rtrim(isnull(cast(Postcode as varchar(50)),'')) as Postcode
				, cast((case when len(rtrim(isnull(Postcode,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_Postcode
				, rtrim(isnull(cast(WayfareStateID_original as varchar(50)),'')) as WayfareStateID_original
				, '' as d_WayfareStateID_original
				, rtrim(isnull(cast(WayfareStateID as varchar(50)),'')) as WayfareStateID
				, cast((case when len(rtrim(isnull(WayfareStateID,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_WayfareStateID
				, rtrim(isnull(cast(IndigenousStatusID_original as varchar(50)),'')) as IndigenousStatusID_original
				, cast('O' as varchar(250)) as d_IndigenousStatusID_original
				, rtrim(isnull(cast(IndigenousStatusID as varchar(50)),'')) as IndigenousStatusID
				, cast('O' as varchar(250)) as d_IndigenousStatusID
				, rtrim(isnull(cast(AmoRegReferringNumber as varchar(50)),'')) as AmoRegReferringNumber
				, cast((case when len(rtrim(isnull(AmoRegReferringNumber,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_AmoRegReferringNumber
				, rtrim(isnull(cast(DoctorName as varchar(120)),'')) as DoctorName
				, cast('O' as varchar(250)) as d_DoctorName
				, rtrim(isnull(cast(TreatingFacilityCode as varchar(50)),'')) as TreatingFacilityCode
				, cast('O' as varchar(250)) as d_TreatingFacilityCode
				, rtrim(isnull(cast(FacilityCode as varchar(50)),'')) as FacilityCode
				, cast((case when len(rtrim(isnull(FacilityCode,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_FacilityCode
				, rtrim(isnull(cast(DateOfDiagnosis as varchar(50)),'')) as DateOfDiagnosis
				, cast((case when len(rtrim(isnull(DateOfDiagnosis,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_DateOfDiagnosis
				, rtrim(isnull(cast(CancerSiteCodeID as varchar(50)),'')) as CancerSiteCodeID
				, cast((case when len(rtrim(isnull(CancerSiteCodeID,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_CancerSiteCodeID
				, rtrim(isnull(cast(CancerSiteCodeIDVersion as varchar(50)),'')) as CancerSiteCodeIDVersion
				, cast((case when len(rtrim(isnull(CancerSiteCodeIDVersion,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_CancerSiteCodeIDVersion 
				, rtrim(isnull(cast(MorphologyCodeIDVersion as varchar(50)),'')) as MorphologyCodeIDVersion
				, cast((case when len(rtrim(isnull(MorphologyCodeIDVersion,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_MorphologyCodeIDVersion		
				, rtrim(isnull(cast(BestBasisOfDiagnosisID_original as varchar(50)),'')) as BestBasisOfDiagnosisID_original
				, cast('O' as varchar(250)) as d_BestBasisOfDiagnosisID_original
				, rtrim(isnull(cast(BestBasisOfDiagnosisID as varchar(50)),'')) as BestBasisOfDiagnosisID
				, cast('O' as varchar(250)) as d_BestBasisOfDiagnosisID
				, rtrim(isnull(cast(Laterality_original as varchar(50)),'')) as Laterality_original
				, cast('O' as varchar(250)) as d_Laterality_original
				, rtrim(isnull(cast(Laterality as varchar(50)),'')) as Laterality
				, cast('O' as varchar(250)) as d_Laterality
				, rtrim(isnull(cast(HistopathologicalGradeID as varchar(50)),'')) as HistopathologicalGradeID
				, cast('O' as varchar(250)) as d_HistopathologicalGradeID
				, rtrim(isnull(cast(cast(MorphologyCodeID as int) as varchar(50)),'')) as MorphologyCodeID
				, cast('O' as varchar(250)) as d_MorphologyCodeID
				, rtrim(isnull(cast(DegreeOfSpreadID as varchar(50)),'')) as DegreeOfSpreadID
				, cast('O' as varchar(250)) as d_DegreeOfSpreadID
				, rtrim(isnull(cast(TNMStagingDate as varchar(50)),'')) as TNMStagingDate
				, cast('O' as varchar(250)) as d_TNMStagingDate
				, rtrim(isnull(cast(TStageID_original as varchar(50)),'')) as TStageID_original
				, rtrim(isnull(cast(NStageID_original as varchar(50)),'')) as NStageID_original
				, rtrim(isnull(cast(MStageID_original as varchar(50)),'')) as MStageID_original
				, rtrim(isnull(cast(TStageID as varchar(50)),'')) as TStageID
				, cast('O' as varchar(250)) as d_TStageID
				, rtrim(isnull(cast(NStageID as varchar(50)),'')) as NStageID
				, cast('O' as varchar(250)) as d_NStageID
				, rtrim(isnull(cast(MStageID as varchar(50)),'')) as MStageID
				, cast('O' as varchar(250)) as d_MStageID
				, rtrim(isnull(cast(TNMStagingGroupID as varchar(50)),'')) as TNMStagingGroupID
				, cast('O' as varchar(250)) as d_TNMStagingGroupID
				, rtrim(isnull(cast(TNMStagingBasisID as varchar(50)),'')) as TNMStagingBasisID
				, cast('O' as varchar(250)) as d_TNMStagingBasisID
				, rtrim(isnull(cast(OtherStagingDate as varchar(50)),'')) as OtherStagingDate
				, cast('O' as varchar(250)) as d_OtherStagingDate
				, rtrim(isnull(cast(OtherStagingSchemeID as varchar(50)),'')) as OtherStagingSchemeID
				, cast('O' as varchar(250)) as d_OtherStagingSchemeID
				, rtrim(isnull(cast(OtherStagingGroupID as varchar(50)),'')) as OtherStagingGroupID
				, cast('O' as varchar(250)) as d_OtherStagingGroupID
				, rtrim(isnull(cast(OtherStagingBasisID as varchar(50)),'')) as OtherStagingBasisID
				, cast('O' as varchar(250)) as d_OtherStagingBasisID
				, rtrim(isnull(cast(EpisodeIntentID_original as varchar(50)),'')) as EpisodeIntentID_original
				, cast('O' as varchar(250)) as d_EpisodeIntentID_original
				, rtrim(isnull(cast(EpisodeIntentID as varchar(50)),'')) as EpisodeIntentID
				, cast('O' as varchar(250)) as d_EpisodeIntentID
				, rtrim(isnull(cast(InitialTreatmentFlag as varchar(50)),'')) as InitialTreatmentFlag
				, cast('O' as varchar(250)) as d_InitialTreatmentFlag
				, rtrim(isnull(cast(EpisodeStartDate as varchar(50)),'')) as EpisodeStartDate
				, cast((case when len(rtrim(isnull(EpisodeStartDate,''))) = 0 then 'M |Empty' else 'M' end) as varchar(250)) as d_EpisodeStartDate
				, rtrim(isnull(cast(EpisodeEndDate as varchar(50)),'')) as EpisodeEndDate
				, cast('O' as varchar(250)) as d_EpisodeEndDate
				, rtrim(isnull(cast(AntiNeoplasticCycles as varchar(50)),'')) as AntiNeoplasticCycles
				, cast('O' as varchar(250)) as d_AntiNeoplasticCycles
				, rtrim(isnull(cast(ProtocolID as varchar(50)),'')) as ProtocolID
				, cast('O' as varchar(250)) as d_ProtocolID
				, rtrim(isnull(cast(NotificationEpisodeChemoCycle as varchar(50)),'')) as NotificationEpisodeChemoCycle
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoCycle
				, rtrim(isnull(cast(OMISDrugName as varchar(512)),'')) as OMISDrugName
				, cast('O' as varchar(250)) as d_OMISDrugName
				, rtrim(isnull(cast(NotificationEpisodeChemoDose as varchar(50)),'')) as NotificationEpisodeChemoDose
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoDose
				, rtrim(isnull(cast(NotificationEpisodeChemoRouteID_original as varchar(50)),'')) as NotificationEpisodeChemoRouteID_original
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoRouteID_original
				, rtrim(isnull(cast(NotificationEpisodeChemoRouteID as varchar(50)),'')) as NotificationEpisodeChemoRouteID
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoRouteID
				, rtrim(isnull(cast(NotificationEpisodeChemoStartDate as varchar(50)),'')) as NotificationEpisodeChemoStartDate
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoStartDate
				, rtrim(isnull(cast(NotificationEpisodeChemoEndDate as varchar(50)),'')) as NotificationEpisodeChemoEndDate
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoEndDate
				, rtrim(isnull(cast(NotificationEpisodeChemoFrequency as varchar(50)),'')) as NotificationEpisodeChemoFrequency
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoFrequency
				, rtrim(isnull(cast(NotificationEpisodeChemoFrequencyUnit as varchar(50)),'')) as NotificationEpisodeChemoFrequencyUnit
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoFrequencyUnit
				, rtrim(isnull(cast(NotificationEpisodeChemoDay as varchar(50)),'')) as NotificationEpisodeChemoDay
				, cast('O' as varchar(250)) as d_NotificationEpisodeChemoDay
				, rtrim(isnull(cast(ReferralDate as varchar(50)),'')) as ReferralDate
				, cast('O' as varchar(250)) as d_ReferralDate
				, rtrim(isnull(cast(ConsultationDate as varchar(50)),'')) as ConsultationDate
				, cast('O' as varchar(250)) as d_ConsultationDate
				, rtrim(isnull(cast(ClinicalTrialDate as varchar(50)),'')) as ClinicalTrialDate
				, cast('O' as varchar(250)) as d_ClinicalTrialDate
				, rtrim(isnull(cast(ClinicalTrialName as varchar(50)),'')) as ClinicalTrialName
				, cast('O' as varchar(250)) as d_ClinicalTrialName
				, rtrim(isnull(cast(MDTDate as varchar(50)),'')) as MDTDate
				, cast('O' as varchar(250)) as d_MDTDate
				, rtrim(isnull(cast(ReferralToPalliativeCareDate as varchar(50)),'')) as ReferralToPalliativeCareDate
				, cast('O' as varchar(250)) as d_ReferralToPalliativeCareDate
				, rtrim(isnull(cast(PerformanceStatusDate as varchar(50)),'')) as PerformanceStatusDate
				, cast('O' as varchar(250)) as d_PerformanceStatusDate
				, rtrim(isnull(cast(PerformanceStatus as varchar(50)),'')) as PerformanceStatus
				, cast('O' as varchar(250)) as d_PerformanceStatus 
				,	CPL_ID
				,	CPlan_Name
				,	Regimen
			from #omis_final  --#omis
			--where FacilityCode = @facility_code
			) a) a
 
 /*
OtherStagingDate
MDTDate
NotificationEpisodeChemoStartDate
NotificationEpisodeChemoEndDate
ConsultationDate
DateOfDiagnosis
TNMStagingDate
DateOfBirth 
EpisodeStartDate
EpisodeEndDate  
ReferralDate
ConsultationDate
ClinicalTrialDate 
ReferralToPalliativeCareDate
PerformanceStatusDate
*/


	update  #omis_debug
	set d_CancerSiteCodeID = d_CancerSiteCodeID +  ' |value not a cancer code'
	where not(CancerSiteCodeID like 'B%' or CancerSiteCodeID like 'C%' or CancerSiteCodeID like 'D%' or CancerSiteCodeID like 'L%')

	update  #omis_debug
	set d_OtherStagingDate = d_OtherStagingDate +  ' |value < DateOfDiagnosis'
	where isdate(OtherStagingDate ) > 0 and isdate(DateOfDiagnosis) > 0 and OtherStagingDate < DateOfDiagnosis

	update  #omis_debug
	set d_TNMStagingDate = d_TNMStagingDate  +  ' |value < DateOfDiagnosis'
	where isdate(TNMStagingDate ) > 0 and isdate(DateOfDiagnosis) > 0 and TNMStagingDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_ClinicalTrialDate  = d_ClinicalTrialDate  +  ' |value < DateOfDiagnosis'
	where isdate(ClinicalTrialDate ) > 0 and isdate(DateOfDiagnosis) > 0 and ClinicalTrialDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_ReferralDate  = d_ReferralDate +  ' |value < DateOfDiagnosis'
	where isdate(ReferralDate ) > 0 and isdate(DateOfDiagnosis) > 0 and ReferralDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_ReferralToPalliativeCareDate  = d_ReferralToPalliativeCareDate  +  ' |value < DateOfDiagnosis'
	where isdate(ReferralToPalliativeCareDate) > 0 and isdate(DateOfDiagnosis) > 0 and ReferralToPalliativeCareDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_ConsultationDate = d_ConsultationDate +  ' |value < DateOfDiagnosis'
	where isdate(ConsultationDate) > 0 and isdate(DateOfDiagnosis) > 0 and ConsultationDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_PerformanceStatusDate = d_PerformanceStatusDate +  ' |value < DateOfDiagnosis'
	where isdate(PerformanceStatusDate) > 0 and isdate(DateOfDiagnosis) > 0 and PerformanceStatusDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_EpisodeEndDate = d_EpisodeEndDate +  ' |value < DateOfDiagnosis'
	where isdate(EpisodeEndDate) > 0 and isdate(DateOfDiagnosis) > 0 and EpisodeEndDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_EpisodeStartDate = d_EpisodeStartDate +  ' |value < DateOfDiagnosis'
	where isdate(EpisodeStartDate) > 0 and isdate(DateOfDiagnosis) > 0 and EpisodeStartDate < DateOfDiagnosis
	
	update  #omis_debug
	set d_ReferralToPalliativeCareDate  = d_ReferralToPalliativeCareDate +  ' |value < DateOfBirth'
	where isdate(ReferralToPalliativeCareDate ) > 0 and isdate(DateOfBirth ) > 0 and ReferralToPalliativeCareDate <= DateOfBirth 

	update  #omis_debug
	set d_ClinicalTrialDate  = d_ClinicalTrialDate  +  ' |value < DateOfBirth'
	where isdate(ClinicalTrialDate ) > 0 and isdate(DateOfBirth ) > 0 and ClinicalTrialDate <= DateOfBirth 

	update  #omis_debug
	set d_MDTDate  = d_MDTDate  +  ' |value < DateOfBirth'
	where isdate(MDTDate ) > 0 and isdate(DateOfBirth ) > 0 and MDTDate <= DateOfBirth 

	update  #omis_debug
	set d_ReferralDate = d_ReferralDate +  ' |value < DateOfBirth'
	where isdate(ReferralDate ) > 0 and isdate(DateOfBirth ) > 0 and ReferralDate <= DateOfBirth 

	update  #omis_debug
	set d_ConsultationDate = d_ConsultationDate +  ' |value < DateOfBirth'
	where isdate(ConsultationDate) > 0 and isdate(DateOfBirth ) > 0 and ConsultationDate <= DateOfBirth 

	update  #omis_debug
	set d_PerformanceStatusDate = d_PerformanceStatusDate +  ' |value < DateOfBirth'
	where isdate(PerformanceStatusDate) > 0 and isdate(DateOfBirth ) > 0 and PerformanceStatusDate <= DateOfBirth 

	update  #omis_debug
	set d_EpisodeStartDate = d_EpisodeStartDate +  ' |value < DateOfBirth'
	where isdate(EpisodeStartDate) > 0 and isdate(DateOfBirth ) > 0 and EpisodeStartDate <= DateOfBirth 

	update  #omis_debug
	set d_EpisodeEndDate = d_EpisodeEndDate +  ' |value < DateOfBirth'
	where isdate(EpisodeEndDate) > 0 and isdate(DateOfBirth ) > 0 and EpisodeEndDate <= DateOfBirth 

	update  #omis_debug
	set d_EpisodeStartDate = d_EpisodeStartDate +  ' |value > EpisodeEndDate'
	where isdate(EpisodeStartDate) > 0 and isdate(EpisodeEndDate ) > 0 and EpisodeStartDate > EpisodeEndDate 
	  
	--update  #omis_debug
	--set d_ = d_ +  ' |value > '
	--where isdate() > 0 and isdate() > 0 and  >    
	 

	update  #omis_debug
	set d_DateOfBirth = d_DateOfBirth +  ' |value > ConsultationDate'
	where DateOfBirth >  ConsultationDate and ConsultationDate <> ''

	update  #omis_debug
	set d_DateOfBirth = d_DateOfBirth +  ' |value > EpisodeStartDate'
	where DateOfBirth >  EpisodeStartDate and EpisodeStartDate <> ''

	update  #omis_debug
	set d_DateOfBirth = d_DateOfBirth +  ' |value > DateOfDiagnosis'
	where DateOfBirth >  DateOfDiagnosis and DateOfDiagnosis <> ''

	update  #omis_debug
	set d_ConsultationDate = d_ConsultationDate +  ' |value < ReferralDate'
	where ConsultationDate <  ReferralDate and ConsultationDate <> '' and ReferralDate <> ''
 
	update  #omis_debug
	set d_DateOfDiagnosis = d_DateOfDiagnosis +  ' |value > NotificationEpisodeChemoStartDate'
	where DateOfDiagnosis >  NotificationEpisodeChemoStartDate and DateOfDiagnosis <> '' and NotificationEpisodeChemoStartDate <> ''

	update  #omis_debug
	set d_ConsultationDate = d_ConsultationDate +  ' |value > NotificationEpisodeChemoStartDate'
	where ConsultationDate >  NotificationEpisodeChemoStartDate and ConsultationDate <> '' and NotificationEpisodeChemoStartDate <> ''

	update  #omis_debug
	set d_NotificationEpisodeChemoStartDate = d_NotificationEpisodeChemoStartDate +  ' |value < ReferralDate'
	where NotificationEpisodeChemoStartDate <  ReferralDate and ReferralDate <> '' and NotificationEpisodeChemoStartDate <> ''

	update  #omis_debug
	set d_NotificationEpisodeChemoEndDate = d_NotificationEpisodeChemoEndDate +  ' |value < NotificationEpisodeChemoStartDate'
	where NotificationEpisodeChemoEndDate <  NotificationEpisodeChemoStartDate and NotificationEpisodeChemoEndDate <> '' and NotificationEpisodeChemoStartDate <> ''

	update  #omis_debug
	set d_PerformanceStatusDate = d_PerformanceStatusDate +  ' |value < ReferralDate'
	where PerformanceStatusDate <  ReferralDate and PerformanceStatusDate <> '' and ReferralDate <> ''

	update  #omis_debug
	set d_ReferralDate = d_ReferralDate +  ' |ReferralDate-ConsultationDate not between 0 and 120 days'
	where not(datediff(d, ReferralDate, ConsultationDate) between 0 and 120) and ConsultationDate <> '' and ReferralDate <> ''

	update  #omis_debug
	set d_ConsultationDate = d_ConsultationDate +  ' |ConsultationDate-NotificationEpisodeChemoStartDate not between 0 and 90 days'
	where not(datediff(d, ConsultationDate, NotificationEpisodeChemoStartDate) between 0 and 90) and ConsultationDate <> '' and NotificationEpisodeChemoStartDate <> ''


	/******* RANGE / SET validation  **********/ 
	update  #omis_debug
	set d_InitialTreatmentFlag = d_InitialTreatmentFlag + ' |value not in range'
	where InitialTreatmentFlag not in (1,2)

	update  #omis_debug
	set d_sex = d_sex + ' |value not valid'
	where  sex not in (1,2,3,9)

	update  #omis_debug
	set d_COBCodeSACC = d_COBCodeSACC + ' |value not in country set'
	where  COBCodeSACC not in (select code from @countries)
 

	update  #omis_debug
	set d_WayfareStateID = d_WayfareStateID + ' |value not in state set'
	where  WayfareStateID not in (select code from @states)

	update  #omis_debug
	set d_IndigenousStatusID = d_IndigenousStatusID + ' |value not in Indigenious set'
	where  IndigenousStatusID not in (select code from @indigenious)

	update  #omis_debug
	set d_FacilityCode = d_FacilityCode + ' |value not in correct format'
	where len(FacilityCode) > 0 and (len(FacilityCode) < 3 or len(FacilityCode) > 5)

	update  #omis_debug
	set d_TreatingFacilityCode = d_TreatingFacilityCode + ' |value not in correct format'
	where TreatingFacilityCode <> '' and ( len(TreatingFacilityCode) < 3 or len(TreatingFacilityCode) > 5)

	update  #omis_debug
	set d_BestBasisOfDiagnosisID = d_BestBasisOfDiagnosisID + ' |value not in valid set'
	where  BestBasisOfDiagnosisID <> '' and BestBasisOfDiagnosisID not in (1,2,4,5,6,7,8)

	update  #omis_debug
	set d_Laterality = d_Laterality + ' |value not in valid set'
	where  Laterality <> '' and Laterality not in (1,2,3,9)

	update  #omis_debug
	set d_HistopathologicalGradeID = d_HistopathologicalGradeID + ' |value not in valid set'
	where  isnumeric(HistopathologicalGradeID) = 1 and HistopathologicalGradeID not in (1,2,3,4,8,9)

	update  #omis_debug
	set d_DegreeOfSpreadID = d_DegreeOfSpreadID + ' |value not in valid set'
	where  isnumeric(DegreeOfSpreadID) = 1 and DegreeOfSpreadID not in (1,2,3,4,6,7,9)

	update  #omis_debug
	set d_TNMStagingBasisID = d_TNMStagingBasisID + ' |value not in valid set'
	where TNMStagingBasisID <> '' and TNMStagingBasisID not in ('P','C')

	update  #omis_debug
	set d_AntiNeoplasticCycles = d_AntiNeoplasticCycles + ' |value out of range'
	where ISNUMERIC(AntiNeoplasticCycles) = 1 and (AntiNeoplasticCycles <  1 or AntiNeoplasticCycles > 300)


	update  #omis_debug
	set d_NotificationEpisodeChemoEndDate = d_NotificationEpisodeChemoEndDate + ' |value < start date'
	where  isdate(NotificationEpisodeChemoEndDate) = 1 and isdate(NotificationEpisodeChemoStartDate) = 1
		and  NotificationEpisodeChemoEndDate  <  NotificationEpisodeChemoStartDate 
	
	update  #omis_debug
	set d_ProtocolID = d_ProtocolID + ' |value not an eviQ number'
	where  isnumeric(replace(replace(replace(replace(ProtocolID,'-',''),':',''),'eviq',''),'id','')) < 1 and ProtocolID <> ''


	select  @hosp_code  as GroupID  --hospitalid
		, replace(right('0'+convert(varchar(10),@startdate, 103),10),'/','')    as d_GroupID  --reportstartdate
		, replace(right('0'+convert(varchar(10),@enddate, 103),10),'/','')  as MedicareNumber  --reportenddate
		, replace(right('0'+convert(varchar(10),getdate(), 103),10),'/','')    as  d_MedicareNumber --rundate
		, right('0'+cast(datepart(hh, getdate()) as varchar(2)),2)+right('0'+cast(datepart(mi, getdate()) as varchar(2)),2) as MRN --runtime
		, cast(count(*) as varchar(50))  as d_MRN --recordcount
		, 'C'  as [UniqueIdentifier] --notificationtypeid
		, max(left(facilitycode,4))   as d_UniqueIdentifier  --cancerfacilittypeid 
		,'' as 	GivenName1
		,'' as 	d_GivenName1
		,'' as 	GivenName2
		,'' as 	d_GivenName2
		,'' as 	Surname
		,'' as 	d_Surname
		,'' as 	AliasSurname
		,'' as 	d_AliasSurname
		,'' as 	Sex
		,'' as 	d_Sex
		,'' as 	DateOfBirth
		,'' as 	d_DateOfBirth
		,'' as 	Birth_Place_original
		,'' as 	d_Birth_Place_original
		,'' as 	COBCodeSACC
		,'' as 	d_COBCodeSACC
		,'' as 	WayfareAddress
		,'' as 	d_WayfareAddress
		,'' as 	Locality
		,'' as 	d_Locality
		,'' as 	Postcode
		,'' as 	d_Postcode
		,'' as 	WayfareStateID_original
		,'' as 	d_WayfareStateID_original
		,'' as 	WayfareStateID
		,'' as 	d_WayfareStateID
		,'' as 	IndigenousStatusID_original
		,'' as 	d_IndigenousStatusID_original
		,'' as 	IndigenousStatusID
		,'' as 	d_IndigenousStatusID
		,'' as 	AmoRegReferringNumber
		,'' as 	d_AmoRegReferringNumber
		,'' as 	DoctorName
		,'' as 	d_DoctorName
		,'' as 	TreatingFacilityCode
		,'' as 	d_TreatingFacilityCode
		,'' as 	FacilityCode
		,'' as 	d_FacilityCode
		,'' as 	DateOfDiagnosis
		,'' as 	d_DateOfDiagnosis
		,'' as 	CancerSiteCodeID
		,'' as 	d_CancerSiteCodeID
		,'' as 	CancerSiteCodeIDVersion
		,'' as 	d_CancerSiteCodeIDVersion
		,'' as 	MorphologyCodeIDVersion
		,'' as 	d_MorphologyCodeIDVersion
		,'' as 	BestBasisOfDiagnosisID_original
		,'' as 	d_BestBasisOfDiagnosisID_original
		,'' as 	BestBasisOfDiagnosisID
		,'' as 	d_BestBasisOfDiagnosisID
		,'' as 	Laterality_original
		,'' as 	d_Laterality_original
		,'' as 	Laterality
		,'' as 	d_Laterality
		,'' as 	HistopathologicalGradeID
		,'' as 	d_HistopathologicalGradeID
		,'' as 	MorphologyCodeID
		,'' as 	d_MorphologyCodeID
		,'' as 	DegreeOfSpreadID
		,'' as 	d_DegreeOfSpreadID
		,'' as 	TNMStagingDate
		,'' as 	d_TNMStagingDate
		--,'' as 	TStageID_original
		--,'' as 	NStageID_original
		--,'' as 	MStageID_original
		,'' as 	TStageID
		,'' as 	d_TStageID
		,'' as 	NStageID
		,'' as 	d_NStageID
		,'' as 	MStageID
		,'' as 	d_MStageID
		,'' as 	TNMStagingGroupID
		,'' as 	d_TNMStagingGroupID
		,'' as 	TNMStagingBasisID
		,'' as 	d_TNMStagingBasisID
		,'' as 	OtherStagingDate
		,'' as 	d_OtherStagingDate
		,'' as 	OtherStagingSchemeID
		,'' as 	d_OtherStagingSchemeID
		,'' as 	OtherStagingGroupID
		,'' as 	d_OtherStagingGroupID
		,'' as 	OtherStagingBasisID
		,'' as 	d_OtherStagingBasisID
		,'' as 	EpisodeIntentID_original
		,'' as 	d_EpisodeIntentID_original
		,'' as 	EpisodeIntentID
		,'' as 	d_EpisodeIntentID
		,'' as 	InitialTreatmentFlag
		,'' as 	d_InitialTreatmentFlag
		,'' as 	EpisodeStartDate
		,'' as 	d_EpisodeStartDate
		,'' as 	EpisodeEndDate
		,'' as 	d_EpisodeEndDate
		,'' as 	AntiNeoplasticCycles
		,'' as 	d_AntiNeoplasticCycles
		,'' as 	ProtocolID
		,'' as 	d_ProtocolID
		,'' as 	NotificationEpisodeChemoCycle
		,'' as 	d_NotificationEpisodeChemoCycle
		,'' as 	OMISDrugName
		,'' as 	d_OMISDrugName
		,'' as 	NotificationEpisodeChemoDose
		,'' as 	d_NotificationEpisodeChemoDose
		,'' as 	NotificationEpisodeChemoRouteID_original
		,'' as 	d_NotificationEpisodeChemoRouteID_original
		,'' as 	NotificationEpisodeChemoRouteID
		,'' as 	d_NotificationEpisodeChemoRouteID
		,'' as 	NotificationEpisodeChemoStartDate
		,'' as 	d_NotificationEpisodeChemoStartDate
		,'' as 	NotificationEpisodeChemoEndDate
		,'' as 	d_NotificationEpisodeChemoEndDate
		,'' as 	NotificationEpisodeChemoFrequency
		,'' as 	d_NotificationEpisodeChemoFrequency
		,'' as 	NotificationEpisodeChemoFrequencyUnit
		,'' as 	d_NotificationEpisodeChemoFrequencyUnit
		,'' as 	NotificationEpisodeChemoDay
		,'' as 	d_NotificationEpisodeChemoDay
		,'' as 	ReferralDate
		,'' as 	d_ReferralDate
		,'' as 	ConsultationDate
		,'' as 	d_ConsultationDate
		,'' as 	ClinicalTrialDate
		,'' as 	d_ClinicalTrialDate
		,'' as 	ClinicalTrialName
		,'' as 	d_ClinicalTrialName
		,'' as 	MDTDate
		,'' as 	d_MDTDate
		,'' as 	ReferralToPalliativeCareDate
		,'' as 	d_ReferralToPalliativeCareDate
		,'' as 	PerformanceStatusDate
		,'' as 	d_PerformanceStatusDate
		,'' as 	PerformanceStatus
		,'' as 	d_PerformanceStatus
		,'' as 	CPL_ID
		,'' as 	CPlan_Name
		,'' as 	Regimen
	from #omis_debug   
	union all
	select 	GroupID
		,	d_GroupID
		,	MedicareNumber
		,	d_MedicareNumber
		,	MRN
		,	d_MRN
		,	UniqueIdentifier
		,	d_UniqueIdentifier
		,	GivenName1
		,	d_GivenName1
		,	GivenName2
		,	d_GivenName2
		,	Surname
		,	d_Surname
		,	AliasSurname
		,	d_AliasSurname
		,	Sex
		,	d_Sex
		,	DateOfBirth
		,	d_DateOfBirth
		,	Birth_Place_original
		,	d_Birth_Place_original
		,	COBCodeSACC
		,	d_COBCodeSACC
		,	WayfareAddress
		,	d_WayfareAddress
		,	Locality
		,	d_Locality
		,	Postcode
		,	d_Postcode
		,	WayfareStateID_original
		,	d_WayfareStateID_original
		,	WayfareStateID
		,	d_WayfareStateID
		,	IndigenousStatusID_original
		,	d_IndigenousStatusID_original
		,	IndigenousStatusID
		,	d_IndigenousStatusID
		,	AmoRegReferringNumber
		,	d_AmoRegReferringNumber
		,	DoctorName
		,	d_DoctorName
		,	TreatingFacilityCode
		,	d_TreatingFacilityCode
		,	FacilityCode
		,	d_FacilityCode
		,	DateOfDiagnosis
		,	d_DateOfDiagnosis
		,	CancerSiteCodeID
		,	d_CancerSiteCodeID
		,	CancerSiteCodeIDVersion
		,	d_CancerSiteCodeIDVersion
		,	MorphologyCodeIDVersion
		,	d_MorphologyCodeIDVersion
		,	BestBasisOfDiagnosisID_original
		,	d_BestBasisOfDiagnosisID_original
		,	BestBasisOfDiagnosisID
		,	d_BestBasisOfDiagnosisID
		,	Laterality_original
		,	d_Laterality_original
		,	Laterality
		,	d_Laterality
		,	HistopathologicalGradeID
		,	d_HistopathologicalGradeID
		,	MorphologyCodeID
		,	d_MorphologyCodeID
		,	DegreeOfSpreadID
		,	d_DegreeOfSpreadID
		,	TNMStagingDate
		,	d_TNMStagingDate
		--,	TStageID_original
		--,	NStageID_original
		--,	MStageID_original
		,	TStageID
		,	d_TStageID
		,	NStageID
		,	d_NStageID
		,	MStageID
		,	d_MStageID
		,	TNMStagingGroupID
		,	d_TNMStagingGroupID
		,	TNMStagingBasisID
		,	d_TNMStagingBasisID
		,	OtherStagingDate
		,	d_OtherStagingDate
		,	OtherStagingSchemeID
		,	d_OtherStagingSchemeID
		,	OtherStagingGroupID
		,	d_OtherStagingGroupID
		,	OtherStagingBasisID
		,	d_OtherStagingBasisID
		,	EpisodeIntentID_original
		,	d_EpisodeIntentID_original
		,	EpisodeIntentID
		,	d_EpisodeIntentID
		,	InitialTreatmentFlag
		,	d_InitialTreatmentFlag
		,	EpisodeStartDate
		,	d_EpisodeStartDate
		,	EpisodeEndDate
		,	d_EpisodeEndDate
		,	AntiNeoplasticCycles
		,	d_AntiNeoplasticCycles
		,	ProtocolID
		,	d_ProtocolID
		,	NotificationEpisodeChemoCycle
		,	d_NotificationEpisodeChemoCycle
		,	OMISDrugName
		,	d_OMISDrugName
		,	NotificationEpisodeChemoDose
		,	d_NotificationEpisodeChemoDose
		,	NotificationEpisodeChemoRouteID_original
		,	d_NotificationEpisodeChemoRouteID_original
		,	NotificationEpisodeChemoRouteID
		,	d_NotificationEpisodeChemoRouteID
		,	NotificationEpisodeChemoStartDate
		,	d_NotificationEpisodeChemoStartDate
		,	NotificationEpisodeChemoEndDate
		,	d_NotificationEpisodeChemoEndDate
		,	NotificationEpisodeChemoFrequency
		,	d_NotificationEpisodeChemoFrequency
		,	NotificationEpisodeChemoFrequencyUnit
		,	d_NotificationEpisodeChemoFrequencyUnit
		,	NotificationEpisodeChemoDay
		,	d_NotificationEpisodeChemoDay
		,	ReferralDate
		,	d_ReferralDate
		,	ConsultationDate
		,	d_ConsultationDate
		,	ClinicalTrialDate
		,	d_ClinicalTrialDate
		,	ClinicalTrialName
		,	d_ClinicalTrialName
		,	MDTDate
		,	d_MDTDate
		,	ReferralToPalliativeCareDate
		,	d_ReferralToPalliativeCareDate
		,	PerformanceStatusDate
		,	d_PerformanceStatusDate
		,	PerformanceStatus
		,	d_PerformanceStatus
		,	CPL_ID
		,	CPlan_Name
		,	Regimen
	from #omis_debug  
	where len(d_AliasSurname) > 1
		or len(d_AmoRegReferringNumber) > 1
		or len(d_AntiNeoplasticCycles) > 1
		or len(d_BestBasisOfDiagnosisID) > 1
		or len(d_BestBasisOfDiagnosisID_original) > 1
		or len(d_Birth_Place_original) > 1
		or len(d_CancerSiteCodeID) > 1
		or len(d_CancerSiteCodeIDVersion) > 1
		or len(d_ClinicalTrialDate) > 1
		or len(d_ClinicalTrialName) > 1
		or len(d_COBCodeSACC) > 1
		or len(d_ConsultationDate) > 1
		or len(d_DateOfBirth) > 1
		or len(d_DateOfDiagnosis) > 1
		or len(d_DegreeOfSpreadID) > 1
		or len(d_DoctorName) > 1
		or len(d_EpisodeEndDate) > 1
		or len(d_EpisodeIntentID) > 1
		or len(d_EpisodeIntentID_original) > 1
		or len(d_EpisodeStartDate) > 1
		or len(d_FacilityCode) > 1
		or len(d_GivenName1) > 1
		or len(d_GivenName2) > 1
		or len(d_GroupID) > 1
		or len(d_HistopathologicalGradeID) > 1
		or len(d_IndigenousStatusID) > 1
		or len(d_IndigenousStatusID_original) > 1
		or len(d_InitialTreatmentFlag) > 1
		or len(d_Laterality) > 1
		or len(d_Laterality_original) > 1
		or len(d_Locality) > 1
		or len(d_MDTDate) > 1
		or len(d_MedicareNumber) > 1
		or len(d_MorphologyCodeID) > 1
		or len(d_MRN) > 1
		or len(d_MStageID) > 1
		or len(d_NotificationEpisodeChemoCycle) > 1
		or len(d_NotificationEpisodeChemoDay) > 1
		or len(d_NotificationEpisodeChemoDose) > 1
		or len(d_NotificationEpisodeChemoEndDate) > 1
		or len(d_NotificationEpisodeChemoFrequency) > 1
		or len(d_NotificationEpisodeChemoFrequencyUnit) > 1
		or len(d_NotificationEpisodeChemoRouteID) > 1
		or len(d_NotificationEpisodeChemoRouteID_original) > 1
		or len(d_NotificationEpisodeChemoStartDate) > 1
		or len(d_NStageID) > 1
		or len(d_OMISDrugName) > 1
		or len(d_OtherStagingBasisID) > 1
		or len(d_OtherStagingDate) > 1
		or len(d_OtherStagingGroupID) > 1
		or len(d_OtherStagingSchemeID) > 1
		or len(d_PerformanceStatus) > 1
		or len(d_PerformanceStatusDate) > 1
		or len(d_Postcode) > 1
		or len(d_ProtocolID) > 1
		or len(d_ReferralToPalliativeCareDate) > 1
		or len(d_ReferralDate) > 1
		or len(d_Sex) > 1
		or len(d_Surname) > 1
		or len(d_TNMStagingBasisID) > 1
		or len(d_TNMStagingDate) > 1
		or len(d_TNMStagingGroupID) > 1
		or len(d_TreatingFacilityCode) > 1
		or len(d_TStageID) > 1
		or len(d_UniqueIdentifier) > 1
		or len(d_WayfareAddress) > 1
		or len(d_WayfareStateID) > 1
		or len(d_WayfareStateID_original) > 1
		 
end
else 
( select @hosp_code  as GroupID  -- @hosp_code  as GroupID  --hospitalid  D209
	, replace(right('0'+convert(varchar(10),@startdate, 103),10),'/','')    as MedicareNumber  --reportstartdate
	, replace(right('0'+convert(varchar(10),@enddate, 103),10),'/','')  as MRN  --reportenddate
	, replace(right('0'+convert(varchar(10),getdate(), 103),10),'/','')    as  [UniqueIdentifier] --rundate
	, right('0'+cast(datepart(hh, getdate()) as varchar(2)),2)+right('0'+cast(datepart(mi, getdate()) as varchar(2)),2) as GivenName1 --runtime
	, cast(count(*) as varchar(50))  as GivenName2 --recordcount
	, 'C'  as Surname --notificationtypeid
	,@facility  as AliasSurname  -- max(left(facilitycode,4))   as AliasSurname  --cancerfacilittypeid
	,'' as	Sex
	,'' as	DateOfBirth
	--,'' as	Birth_Place_original
	,'' as	COBCodeSACC
	,'' as	WayfareAddress
	,'' as	Locality
	,'' as	Postcode
	--,'' as	WayfareStateID_original
	,'' as	WayfareStateID
	--,'' as IndigenousStatusID_original
	,'' as IndigenousStatusID
	,'' as AmoRegReferringNumber
	,'' as DoctorName
	,'' as TreatingFacilityCode
	,'' as FacilityCode
	,'' as DateOfDiagnosis
	,'' as CancerSiteCodeID
	,'' as CancerSiteCodeIDVersion
	--,'' as BestBasisOfDiagnosisID_original
	,'' as BestBasisOfDiagnosisID
	--,'' as Laterality_original
	,'' as Laterality
	,'' as HistopathologicalGradeID
	,'' as MorphologyCodeID
	,'' as MorphologyCodeIDVersion
	,'' as DegreeOfSpreadID
	,'' as TNMStagingDate
	,'' as TStageID
	,'' as NStageID
	,'' as MStageID
	,'' as TNMStagingGroupID
	,'' as TNMStagingBasisID
	,'' as OtherStagingDate
	,'' as OtherStagingSchemeID
	,'' as OtherStagingGroupID
	,'' as OtherStagingBasisID
	--,'' as EpisodeIntentID_original
	,'' as EpisodeIntentID 
	,'' as InitialTreatmentFlag
	,'' as EpisodeStartDate
	,'' as EpisodeEndDate
	,'' as AntiNeoplasticCycles
	,'' as ProtocolID
	,'' as NotificationEpisodeChemoCycle
	,'' as OMISDrugName 
	,'' as NotificationEpisodeChemoDose 
	--,'' as NotificationEpisodeChemoRouteID_original
	,'' as NotificationEpisodeChemoRouteID
	,'' as NotificationEpisodeChemoStartDate
	,'' as NotificationEpisodeChemoEndDate
	,'' as NotificationEpisodeChemoFrequency
	,'' as NotificationEpisodeChemoFrequencyUnit
	,'' as NotificationEpisodeChemoDay
	,'' as ReferralDate
	,'' as ConsultationDate
	,'' as InitialConsultationDate
	,'' as ClinicalTrialDate
	,'' as ClinicalTrialName
	,'' as MDTDate
	,'' as ReferralToPalliativeCareDate
	,'' as PerformanceStatusDate
	,'' as PerformanceStatus

from #omis_final
union all  
select isnull(cast(GroupID  as varchar(11)),'') as GroupID 
	, isnull(cast(MedicareNumber  as varchar(12)),'') as MedicareNumber 
	, isnull(cast(MRN  as varchar(20)),'') as MRN 
	, isnull(cast([UniqueIdentifier]  as varchar(20)),'') as [UniqueIdentifier] 
	, isnull(cast(GivenName1  as varchar(40)),'') as GivenName1 
	, isnull(cast(GivenName2  as varchar(40)),'') as GivenName2 
	, isnull(cast(Surname  as varchar(40)),'') as Surname 
	, isnull(cast(AliasSurname  as varchar(40)),'') as AliasSurname 
	, isnull(cast(Sex as varchar(1)),'') as Sex
	, isnull(replace(right('0'+convert(varchar(10),DateOfBirth, 103),10),'/',''),'') as DateOfBirth
	--, isnull(cast(Birth_Place_original as varchar(30)),'') as Birth_Place_original
	, isnull(cast(COBCodeSACC as varchar(4)),'') as COBCodeSACC
	, isnull(cast(WayfareAddress as varchar(180)),'') as WayfareAddress
	, isnull(cast(Locality as varchar(40)),'') as Locality
	, isnull(cast(Postcode as varchar(4)),'') as Postcode
	--, isnull(cast(WayfareStateID_original as varchar(30)),'') as WayfareStateID_original
	, isnull(cast(WayfareStateID as varchar(2)),'') as WayfareStateID
	--, isnull(cast(IndigenousStatusID_original as varchar(30)),'') as IndigenousStatusID_original
	, isnull(cast(IndigenousStatusID as varchar(1)),'') as IndigenousStatusID
	, isnull(cast(AmoRegReferringNumber as varchar(20)),'') as AmoRegReferringNumber
	, isnull(cast(DoctorName as varchar(120)),'') as DoctorName
	, isnull(cast(TreatingFacilityCode as varchar(4)),'') as TreatingFacilityCode
	, isnull(left(cast(FacilityCode as varchar(30)),4),'') as FacilityCode
	, isnull(replace(right('0'+convert(varchar(10),DateOfDiagnosis, 103),10),'/',''),'01019999') as DateOfDiagnosis
	, isnull(cast(CancerSiteCodeID as varchar(7)),'') as CancerSiteCodeID
	, isnull(cast(CancerSiteCodeIDVersion as varchar(10)),'') as CancerSiteCodeIDVersion
	--, isnull(cast(BestBasisOfDiagnosisID_original as varchar(30)),'') as BestBasisOfDiagnosisID_original
	, isnull(cast(BestBasisOfDiagnosisID as varchar(1)),'') as BestBasisOfDiagnosisID
	--, isnull(cast(Laterality_original as varchar(30)),'') as Laterality_original
	, isnull(cast(Laterality as varchar(1)),'') as Laterality
	, isnull(cast(HistopathologicalGradeID as varchar(1)),'') as HistopathologicalGradeID
	, isnull(cast(cast(MorphologyCodeID as int) as varchar(10)),'') as MorphologyCodeID
	, isnull(cast(MorphologyCodeIDVersion as varchar(10)),'') as MorphologyCodeIDVersion
	, isnull(cast(DegreeOfSpreadID as varchar(1)),'') as DegreeOfSpreadID
	, isnull(replace(right('0'+convert(varchar(10),TNMStagingDate, 103),10),'/',''),'') as TNMStagingDate
	, isnull(cast(TStageID as varchar(50)),'') as TStageID
	, isnull(cast(NStageID as varchar(50)),'') as NStageID
	, isnull(cast(MStageID as varchar(50)),'') as MStageID
	, isnull(cast(TNMStagingGroupID as varchar(50)),'') as TNMStagingGroupID
	, isnull(cast(TNMStagingBasisID as varchar(1)),'') as TNMStagingBasisID
	, isnull(replace(right('0'+convert(varchar(10),OtherStagingDate, 103),10),'/',''),'') as OtherStagingDate 
	, isnull(cast(OtherStagingSchemeID as varchar(2)),'') as OtherStagingSchemeID
	, isnull(cast(OtherStagingGroupID as varchar(14)),'') as OtherStagingGroupID
	, isnull(cast(OtherStagingBasisID as varchar(1)),'') as OtherStagingBasisID
	--, isnull(cast(EpisodeIntentID_original as varchar(30)),'') as EpisodeIntentID_original
	, isnull(cast(EpisodeIntentID as varchar(2)),'') as EpisodeIntentID
	, isnull(cast(InitialTreatmentFlag as varchar(1)),'') as InitialTreatmentFlag 
	, isnull(replace(right('0'+convert(varchar(10),EpisodeStartDate, 103),10),'/',''),'') as EpisodeStartDate
	, isnull(replace(right('0'+convert(varchar(10),EpisodeEndDate, 103),10),'/',''),'') as EpisodeEndDate
	, isnull(cast(AntiNeoplasticCycles as varchar(3)),'') as AntiNeoplasticCycles
	, isnull(cast(ProtocolID as varchar(15)),'') as ProtocolID
	, isnull(cast(NotificationEpisodeChemoCycle as varchar(3)),'') as NotificationEpisodeChemoCycle
	, isnull(cast(OMISDrugName as varchar(512)),'') as OMISDrugName
	, isnull(cast(NotificationEpisodeChemoDose as varchar(20)),'') as NotificationEpisodeChemoDose
	--, isnull(cast(NotificationEpisodeChemoRouteID_original as varchar(30)),'') as NotificationEpisodeChemoRouteID_original
	, isnull(cast(NotificationEpisodeChemoRouteID as varchar(2)),'') as NotificationEpisodeChemoRouteID
	, isnull(replace(right('0'+convert(varchar(10),NotificationEpisodeChemoStartDate, 103),10),'/',''),'') as NotificationEpisodeChemoStartDate
	, isnull(replace(right('0'+convert(varchar(10),NotificationEpisodeChemoEndDate, 103),10),'/',''),'') as NotificationEpisodeChemoEndDate
	, isnull(cast(NotificationEpisodeChemoFrequency as varchar(2)),'') as NotificationEpisodeChemoFrequency
	, isnull(cast(NotificationEpisodeChemoFrequencyUnit as varchar(1)),'') as NotificationEpisodeChemoFrequencyUnit
	, isnull(cast(NotificationEpisodeChemoDay as varchar(15)),'') as NotificationEpisodeChemoDay
	, isnull(replace(right('0'+convert(varchar(10),ReferralDate, 103),10),'/',''),'') as ReferralDate
	, isnull(replace(right('0'+convert(varchar(10),ConsultationDate , 103),10),'/',''),'') as ConsultationDate
	, REPLACE( isnull(replace(right('0'+convert(varchar(10),InitConsultDate , 103),10),'/',''),''),'0NULL','') as InitialConsultationDate
	, isnull(replace(right('0'+convert(varchar(10),ClinicalTrialDate, 103),10),'/',''),'') as ClinicalTrialDate
	, isnull(cast(ClinicalTrialName as varchar(100)),'') as ClinicalTrialName
	, isnull(replace(right('0'+convert(varchar(10),MDTDate, 103),10),'/',''),'') as MDTDate
	, isnull(replace(right('0'+convert(varchar(10),ReferralToPalliativeCareDate , 103),10),'/',''),'') as ReferralToPalliativeCareDate
	, isnull(replace(right('0'+convert(varchar(10),PerformanceStatusDate, 103),10),'/',''),'') as PerformanceStatusDate
	, isnull(cast(PerformanceStatus as varchar(15)),'') as PerformanceStatus
from #omis_final  ) 
  


